<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFCoreSecondLevelCacheInterceptor</name>
    </assembly>
    <members>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CachableQueriesOptions">
            <summary>
                Cachable queries Options
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CacheableEventId">
            <summary>
                Event IDs for events that correspond to messages logged to an ILogger
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableEventId.CacheableBaseId">
            <summary>
                The lower-bound for event IDs used by any Entity Framework or provider code.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableEventId.CacheHit">
            <summary>
                A query result is returned from cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableEventId.QueryResultCached">
            <summary>
                A query result is stored by the cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableEventId.QueryResultInvalidated">
            <summary>
                A query result is removed from the cache.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId">
            <summary>
                Event IDs of the internal logged messages of the library
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.None">
            <summary>
                It's not used
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CacheHit">
            <summary>
                The query result is returned from the cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.QueryResultCached">
            <summary>
                The query result is stored in the cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.QueryResultInvalidated">
            <summary>
                The query result was removed from the cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CachingSkipped">
            <summary>
                The query result was not cached due to some predefined setting.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.InvalidationSkipped">
            <summary>
                The query result was not remove from the cached due to some predefined setting.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CachingSystemStarted">
            <summary>
                It will be fired when the current interceptor is instantiated for the first time.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CachingError">
            <summary>
                An exception has been occured
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.QueryResultSuppressed">
            <summary>
                The query result was overwritten by the interceptor for the cache
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CacheDependenciesCalculated">
            <summary>
                It will be fired when the cache dependencies if the current query are calculated
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheableLogEventId.CachePolicyCalculated">
            <summary>
                It will be fired when the cache policy of the current query is calculated
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CacheAllQueriesOptions">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheAllQueriesOptions.ExpirationMode">
            <summary>
                Defines the expiration mode of the cache item.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheAllQueriesOptions.Timeout">
            <summary>
                The expiration timeout.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheAllQueriesOptions.IsActive">
            <summary>
                Enables or disables the `CacheAllQueries` feature.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CacheExpirationMode">
            <summary>
                Defines the supported expiration modes for cache items.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheExpirationMode.Absolute">
            <summary>
                Defines absolute expiration. The item will expire after the expiration timeout.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.CacheExpirationMode.Sliding">
            <summary>
                Defines sliding expiration. The expiration timeout will be refreshed on every access.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions.#ctor(System.Collections.Generic.IList{System.Type})">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions.EntityTypes">
            <summary>
                Given entity types to cache
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions.TableNameComparison">
            <summary>
                How should we determine which tables should be cached?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions.TableTypeComparison">
            <summary>
                How should we determine which tables should be cached?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.CacheSpecificQueriesOptions.TableNames">
            <summary>
                Given table names to cache
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor">
            <summary>
                Helps processing SecondLevelCacheInterceptor
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor.#ctor(EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor},EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider,EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor,EFCoreSecondLevelCacheInterceptor.IEFCacheKeyProvider,EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser,EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor,Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},EFCoreSecondLevelCacheInterceptor.IEFCacheServiceCheck)">
            <summary>
                Helps processing SecondLevelCacheInterceptor
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor.ProcessExecutedCommands``1(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,``0)">
            <summary>
                Reads data from cache or cache it and then returns the result
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor.ProcessExecutingCommands``1(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,``0)">
            <summary>
                Reads command's data from the cache, if any.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.DbCommandInterceptorProcessor.ShouldSkipProcessing(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)">
            <summary>
                Is this command marked for caching?
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCachedData">
            <summary>
                Cached Data
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachedData.TableRows">
            <summary>
                DbDataReader's result.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachedData.NonQuery">
            <summary>
                DbDataReader's NonQuery result.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachedData.Scalar">
            <summary>
                DbDataReader's Scalar result.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachedData.IsNull">
            <summary>
                Is result of the query null?
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor">
            <summary>
                Cache Dependencies Calculator
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor.#ctor(EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor},EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider,EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor,Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},EFCoreSecondLevelCacheInterceptor.IEFCacheKeyPrefixProvider)">
            <summary>
                Cache Dependencies Calculator
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor.GetCacheDependencies(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Finds the related table names of the current query.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor.GetCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCachePolicy,System.Collections.Generic.SortedSet{System.String},System.String)">
            <summary>
                Finds the related table names of the current query.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheDependenciesProcessor.InvalidateCacheDependencies(System.String,EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions">
            <summary>
                Returns a new cached query.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.IsNotCachableMarker">
            <summary>
                IsNotCachable Marker
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String[],System.String)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="cacheDependencies">
                Set this option to the `real` related table names of the current query, if you are using an stored procedure,
                otherwise cache dependencies of normal queries will be calculated automatically.
                `cacheDependencies` determines which tables are used in this final query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </param>
            <param name="saltKey">
                If you think the computed hash of the query to calculate the cache-key is not enough, set this
                value.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String[])">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="cacheDependencies">
                Set this option to the `real` related table names of the current query, if you are using an stored procedure,
                otherwise cache dependencies of normal queries will be calculated automatically.
                `cacheDependencies` determines which tables are used in this final query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="saltKey">
                If you think the computed hash of the query to calculate the cache-key is not enough, set this
                value.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0})">
            <summary>
                Returns a new query where the entities returned by it will be cached only for 30 minutes.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
                Returns a new query where the entities returned by it will be cached only for 30 minutes.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String[],System.String)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="cacheDependencies">
                Set this option to the `real` related table names of the current query, if you are using an stored procedure,
                otherwise cache dependencies of normal queries will be calculated automatically.
                `cacheDependencies` determines which tables are used in this final query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </param>
            <param name="saltKey">
                If you think the computed hash of the query to calculate the cache-key is not enough, set this
                value.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String[])">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="cacheDependencies">
                Set this option to the `real` related table names of the current query, if you are using an stored procedure,
                otherwise cache dependencies of normal queries will be calculated automatically.
                `cacheDependencies` determines which tables are used in this final query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String)">
            <summary>
                Returns a new query where the entities returned will be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="expirationMode">Defines the expiration mode of the cache item.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="saltKey">
                If you think the computed hash of the query to calculate the cache-key is not enough, set this
                value.
            </param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.NotCacheable``1(System.Linq.IQueryable{``0})">
            <summary>
                Returns a new query where the entities returned will note be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachedQueryExtensions.NotCacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
                Returns a new query where the entities returned will note be cached.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheKey">
            <summary>
                Stores information of the computed key of the input LINQ query.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKey.#ctor(System.Collections.Generic.ISet{System.String})">
            <summary>
                Stores information of the computed key of the input LINQ query.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCacheKey.KeyHash">
            <summary>
                Hash of the input LINQ query's computed key.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCacheKey.DbContext">
            <summary>
                Type of DbContext.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCacheKey.CacheDependencies">
            <summary>
                Determines which entities are used in this LINQ query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKey.Equals(System.Object)">
            <summary>
                Equals
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKey.GetHashCode">
            <summary>
                GetHashCode
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKey.ToString">
            <summary>
                ToString
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheKeyPrefixProvider">
            <summary>
                A custom cache key prefix provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKeyPrefixProvider.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings})">
            <summary>
                A custom cache key prefix provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKeyPrefixProvider.GetCacheKeyPrefix">
            <summary>
                returns the current provided cache key prefix
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheKeyProvider">
            <summary>
                A custom cache key provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKeyProvider.#ctor(EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor,EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser,EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFCacheKeyProvider},EFCoreSecondLevelCacheInterceptor.IEFHashProvider,EFCoreSecondLevelCacheInterceptor.IEFCacheKeyPrefixProvider)">
            <summary>
                A custom cache key provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheKeyProvider.GetEFCacheKey(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets an EF query and returns its hashed key to store in the cache.
            </summary>
            <param name="command">The EF query.</param>
            <param name="context">DbContext is a combination of the Unit Of Work and Repository patterns.</param>
            <param name="cachePolicy">determines the Expiration time of the cache.</param>
            <returns>Information of the computed key of the input LINQ query.</returns>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider">
            <summary>
                Using ICacheManager as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider.#ctor(CacheManager.Core.ICacheManager{System.Collections.Generic.ISet{System.String}},CacheManager.Core.ICacheManager{EFCoreSecondLevelCacheInterceptor.EFCachedData},EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider})">
            <summary>
                Using IMemoryCache as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider.InsertValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachedData,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider.ClearAllCachedEntries">
            <summary>
                Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider.GetValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheManagerCoreProvider.InvalidateCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="cacheKey">Stores information of the computed key of the input LINQ query.</param>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCachePolicy">
            <summary>
                EFCachePolicy determines the Expiration time of the cache.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.ItemsSeparator">
            <summary>
                It's `|`
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.PartsSeparator">
            <summary>
                It's `-->`
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheDependenciesSeparator">
            <summary>
                It's `_`
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.UnknownsCacheDependency">
            <summary>
                It's an special key for unknown cache dependencies
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheExpirationMode">
            <summary>
                Defines the expiration mode of the cache item.
                Its default value is Absolute.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheTimeout">
            <summary>
                The expiration timeout.
                Its default value is 20 minutes later.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheSaltKey">
            <summary>
                If you think the computed hash of the query to calculate the cache-key is not enough, set this value.
                Its default value is string.Empty.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheItemsDependencies">
            <summary>
                Determines which entities are used in this LINQ query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.IsDefaultCacheableMethod">
            <summary>
                Determines the default Cacheable method
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.CacheDependencies(System.String[])">
            <summary>
                Set this option to the `real` related table names of the current query, if you are using an stored procedure,
                otherwise cache dependencies of normal queries will be calculated automatically.
                `cacheDependencies` determines which tables are used in this final query.
                This array will be used to invalidate the related cache of all related queries automatically.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.ExpirationMode(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode)">
            <summary>
                Defines the expiration mode of the cache item.
                Its default value is Absolute.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.Timeout(System.TimeSpan)">
            <summary>
                The expiration timeout.
                Its default value is 20 minutes later.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.SaltKey(System.String)">
            <summary>
                If you think the computed hash of the query to calculate the cache-key is not enough, set this value.
                Its default value is string.Empty.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.DefaultCacheableMethod(System.Boolean)">
            <summary>
                Determines the default Cacheable method
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.Configure(System.Action{EFCoreSecondLevelCacheInterceptor.EFCachePolicy})">
            <summary>
                Determines the Expiration time of the cache.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicy.ToString">
            <summary>
                Represents the textual form of the current object
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser">
            <summary>
                EFCachePolicy Parser Utils
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser.EFCachePolicyTagPrefix">
            <summary>
                EFCachePolicy Tag Prefix
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser.#ctor(Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor,EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser})">
            <summary>
                EFCachePolicy Parser Utils
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser.HasEFCachePolicy(System.String)">
            <summary>
                Does `commandText` contain EFCachePolicyTagPrefix?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser.RemoveEFCachePolicyTag(System.String)">
            <summary>
                Removes the EFCachePolicy line from the commandText
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCachePolicyParser.GetEFCachePolicy(System.String,System.Collections.Generic.IList{EFCoreSecondLevelCacheInterceptor.TableEntityInfo})">
            <summary>
                Converts the `commandText` to an instance of `EFCachePolicy`
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCacheServiceCheck">
            <summary>
                Is the configured cache provider online?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheServiceCheck.#ctor(Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider)">
            <summary>
                Is the configured cache provider online?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCacheServiceCheck.IsCacheServiceAvailable">
            <summary>
                Is the configured cache services online and available? Can we use it without any problem?
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions">
            <summary>
                Defines EFCoreSecondLevel's Options
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.CacheAllQueries(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                Puts the whole system in cache. In this case calling the `Cacheable()` methods won't be necessary.
                If you specify the `Cacheable()` method, its setting will override this global setting.
                If you want to exclude some queries from this global cache, apply the `NotCacheable()` method to them.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.CacheQueriesContainingTableNames(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,EFCoreSecondLevelCacheInterceptor.TableNameComparison,System.String[])">
            <summary>
                Puts the whole system in cache just for the specified `realTableNames`.
                In this case calling the `Cacheable()` methods won't be necessary.
                If you specify the `Cacheable()` method, its setting will override this global setting.
                If you want to exclude some queries from this global cache, apply the `NotCacheable()` method to them.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="tableNameComparison">How should we determine which tables should be cached?</param>
            <param name="realTableNames">
                The real table names.
                Queries containing these names will be cached.
                Table names are not case sensitive.
            </param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.CacheQueriesContainingTypes(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,EFCoreSecondLevelCacheInterceptor.TableTypeComparison,System.Type[])">
            <summary>
                Puts the whole system in cache just for the specified `entityTypes`.
                In this case calling the `Cacheable()` methods won't be necessary.
                If you specify the `Cacheable()` method, its setting will override this global setting.
                If you want to exclude some queries from this global cache, apply the `NotCacheable()` method to them.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="tableTypeComparison">How should we determine which tables should be cached?</param>
            <param name="entityTypes">The real entity types. Queries containing these types will be cached.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCustomHashProvider``1">
            <summary>
                You can introduce a custom IEFHashProvider to be used as the HashProvider.
                If you don't specify a custom hash provider, the default `XxHash64Unsafe` provider will be used.
                `xxHash` is an extremely fast `non-cryptographic` Hash algorithm, working at speeds close to RAM limits.
            </summary>
            <typeparam name="T">Implements IEFHashProvider</typeparam>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCustomCacheProvider``1">
            <summary>
                You can introduce a custom IEFCacheServiceProvider to be used as the CacheProvider.
            </summary>
            <typeparam name="T">Implements IEFCacheServiceProvider</typeparam>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCustomCacheProvider``1(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                You can introduce a custom IEFCacheServiceProvider to be used as the CacheProvider.
                If you specify the `Cacheable()` method options, its setting will override this global setting.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <typeparam name="T">Implements IEFCacheServiceProvider</typeparam>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseMemoryCacheProvider">
            <summary>
                Introduces the built-in `EFMemoryCacheServiceProvider` to be used as the CacheProvider.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseMemoryCacheProvider(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                Introduces the built-in `EFMemoryCacheServiceProvider` to be used as the CacheProvider.
                If you specify the `Cacheable()` method options, its setting will override this global setting.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCacheManagerCoreProvider">
            <summary>
                Introduces the built-in `CacheManagerCoreProvider` to be used as the CacheProvider.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCacheManagerCoreProvider(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan)">
            <summary>
                Introduces the built-in `CacheManagerCoreProvider` to be used as the CacheProvider.
                If you specify the `Cacheable()` method options, its setting will override this global setting.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseEasyCachingCoreProvider(System.String,System.Boolean)">
            <summary>
                Introduces the built-in `EasyCachingCoreProvider` to be used as the CacheProvider.
            </summary>
            <param name="providerName">Selected caching provider name.</param>
            <param name="isHybridCache">Is an instance of EasyCaching.HybridCache</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseEasyCachingCoreProvider(System.Func{System.IServiceProvider,EFCoreSecondLevelCacheInterceptor.EFCacheKey,System.String},System.Boolean)">
            <summary>
                Introduces the built-in `EasyCachingCoreProvider` to be used as the CacheProvider.
            </summary>
            <param name="providerName">
                Selected caching provider name.
                This option will let you to choose a different redis database for your current tenant.
                <![CDATA[ Such as: (serviceProvider, cacheKey) => "redis-db-" + serviceProvider.GetRequiredService<IHttpContextAccesor>().HttpContext.Request.Headers["tenant-id"]; ]]>
            </param>
            <param name="isHybridCache">Is an instance of EasyCaching.HybridCache</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseEasyCachingCoreProvider(System.String,EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.Boolean)">
            <summary>
                Introduces the built-in `EasyCachingCoreProvider` to be used as the CacheProvider.
                If you specify the `Cacheable()` method options, its setting will override this global setting.
            </summary>
            <param name="providerName">Selected caching provider name.</param>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="isHybridCache">Is an instance of EasyCaching.HybridCache</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseEasyCachingCoreProvider(System.Func{System.IServiceProvider,EFCoreSecondLevelCacheInterceptor.EFCacheKey,System.String},EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.Boolean)">
            <summary>
                Introduces the built-in `EasyCachingCoreProvider` to be used as the CacheProvider.
                If you specify the `Cacheable()` method options, its setting will override this global setting.
            </summary>
            <param name="providerName">
                Selected caching provider name.
                This option will let you to choose a different redis database for your current tenant.
                <![CDATA[ Such as: (serviceProvider, cacheKey) => "redis-db-" + serviceProvider.GetRequiredService<IHttpContextAccesor>().HttpContext.Request.Headers["tenant-id"]; ]]>
            </param>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="isHybridCache">Is an instance of EasyCaching.HybridCache</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCacheKeyPrefix(System.Func{System.IServiceProvider,System.String})">
            <summary>
                Sets a dynamic prefix for the current cachedKey.
            </summary>
            <param name="prefix">
                Selected cache key prefix.
                This option will let you to choose a different cache key prefix for your current tenant.
                <![CDATA[ Such as: serviceProvider => "EF_" + serviceProvider.GetRequiredService<IHttpContextAccesor>().HttpContext.Request.Headers["tenant-id"] ]]>
            </param>
            <returns>EFCoreSecondLevelCacheOptions.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseCacheKeyPrefix(System.String)">
            <summary>
                Uses the cache key prefix.
                Sets the prefix to all of the cachedKey's.
                Its default value is `EF_`.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>EFCoreSecondLevelCacheOptions.</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.ConfigureLogging(System.Boolean,System.Action{System.ValueTuple{EFCoreSecondLevelCacheInterceptor.CacheableLogEventId,System.String}})">
            <summary>
                Should the debug level logging be enabled?
                Set it to false for maximum performance.
            </summary>
            <param name="enable">Set it to true, to enable logging</param>
            <param name="cacheableEvent">
                If you set EnableLogging to true, this delegate will give you the internal caching
                events of the library.
            </param>
            <returns></returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.UseDbCallsIfCachingProviderIsDown(System.TimeSpan)">
            <summary>
                Fallback on db if the caching provider (redis) is down.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.EnableCachingInterceptor(System.Boolean)">
            <summary>
                Set it to false to disable this caching interceptor entirely.
                Its default value is `true`.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.AllowCachingWithExplicitTransactions(System.Boolean)">
            <summary>
                Possibility to allow caching with explicit transactions.
                Its default value is false.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.SkipCachingCommands(System.Predicate{System.String})">
            <summary>
                Here you can decide based on the correct executing SQL command, should we cache its result or not?
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.SkipCachingResults(System.Predicate{System.ValueTuple{System.String,System.Object}})">
            <summary>
                Here you can decide based on the correct executing result, should we cache this result or not?
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.SkipCacheInvalidationCommands(System.Predicate{System.String})">
            <summary>
                Here you can decide based on the correct executing SQL command, should we invalidate the cache or not?
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.CacheAllQueriesExceptContainingTableNames(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.String[])">
            <summary>
                Puts the whole system in cache except for the specified `realTableNames`.
                In this case calling the `Cacheable()` methods won't be necessary.
                If you specify the `Cacheable()` method, its setting will override this global setting.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="realTableNames">
                The real table names.
                Queries containing these names will not be cached.
                Table names are not case sensitive.
            </param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions.CacheAllQueriesExceptContainingTypes(EFCoreSecondLevelCacheInterceptor.CacheExpirationMode,System.TimeSpan,System.Type[])">
            <summary>
                Puts the whole system in cache except for the specified `entityTypes`.
                In this case calling the `Cacheable()` methods won't be necessary.
                If you specify the `Cacheable()` method, its setting will override this global setting.
            </summary>
            <param name="expirationMode">Defines the expiration mode of the cache items globally.</param>
            <param name="timeout">The expiration timeout.</param>
            <param name="entityTypes">The real entity types. Queries containing these types will not be cached.</param>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings">
            <summary>
                Global Cache Settings
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheProvider">
            <summary>
                The selected cache provider
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.HashProvider">
            <summary>
                The selected hash provider
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.ProviderName">
            <summary>
                Selected caching provider name
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheProviderName">
            <summary>
                This option will let you to choose a different redis database for your current tenant.
                <![CDATA[ Such as: (serviceProvider, cacheKey) => "redis-db-" + serviceProvider.GetRequiredService<IHttpContextAccesor>().HttpContext.Request.Headers["tenant-id"]; ]]>
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.IsHybridCache">
            <summary>
                Is an instance of EasyCaching.HybridCache
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheKeyPrefix">
            <summary>
                Gets or sets the cache key prefix.
                Its default value is `EF_`.
            </summary>
            <value>The cache key prefix.</value>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheKeyPrefixSelector">
            <summary>
                Gets or sets a dynamic cache key prefix.
            </summary>
            <value>The cache key prefix.</value>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheAllQueriesOptions">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheSpecificQueriesOptions">
            <summary>
                Cache Specific Queries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CachableQueriesOptions">
            <summary>
                Cachable Queries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.SkipCacheSpecificQueriesOptions">
            <summary>
                Skip Cache Specific Queries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.EnableLogging">
            <summary>
                Should the debug level logging be enabled?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.UseDbCallsIfCachingProviderIsDown">
            <summary>
                Fallback on db if the caching provider (redis) is down.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.IsCachingInterceptorEnabled">
            <summary>
                Set it to false to disable this caching interceptor.
                Its default value is `true`.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.NextCacheServerAvailabilityCheck">
            <summary>
                The cache server's availability check interval value.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.AllowCachingWithExplicitTransactions">
            <summary>
                Possibility to allow caching with explicit transactions.
                Its default value is false.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.SkipCachingCommands">
            <summary>
                Here you can decide based on the correct executing SQL command, should we cache its result or not?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.SkipCacheInvalidationCommands">
            <summary>
                Here you can decide based on the correct executing SQL command, should we invalidate the cache or not?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.SkipCachingResults">
            <summary>
                Here you can decide based on the correct executing result, should we cache this result or not?
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings.CacheableEvent">
            <summary>
                If you set DisableLogging to false, this delegate will give you the internal caching events of the library.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader">
            <summary>
                Converts a DbDataReader to an EFTableRows
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
                Converts a DbDataReader to an EFTableRows
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.HasRows">
            <summary>
                Gets a value that indicates whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.RecordsAffected">
            <summary>
                Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.IsClosed">
            <summary>
                Retrieves a Boolean value that indicates whether the specified SqlDataReader instance has been closed.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.Depth">
            <summary>
                Gets a value that indicates the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.FieldCount">
            <summary>
                Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.VisibleFieldCount">
            <summary>
                Gets the number of fields in the SqlDataReader that are not hidden.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.Item(System.String)">
            <summary>
                Returns GetValue(GetOrdinal(name))
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.Item(System.Int32)">
            <summary>
                Returns GetValue(ordinal)
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetDataTypeName(System.Int32)">
            <summary>
                Gets a string representing the data type of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetFieldType(System.Int32)">
            <summary>
                Gets the Type that is the data type of the object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetName(System.Int32)">
            <summary>
                Gets the name of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetOrdinal(System.String)">
            <summary>
                Gets the column ordinal, given the name of the column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetSchemaTable">
            <summary>
                Returns a DataTable that describes the column metadata of the SqlDataReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetBoolean(System.Int32)">
            <summary>
                Gets the value of the specified column as a Boolean.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetByte(System.Int32)">
            <summary>
                Gets the value of the specified column as a byte.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer
                offset.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetChar(System.Int32)">
            <summary>
                Gets the value of the specified column as a single character.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads a stream of characters from the specified column offset into the buffer as an array starting at the given
                buffer offset.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetDateTime(System.Int32)">
            <summary>
                Gets the value of the specified column as a DateTime object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetDecimal(System.Int32)">
            <summary>
                Gets the value of the specified column as a Decimal object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetDouble(System.Int32)">
            <summary>
                Gets the value of the specified column as a double-precision floating point number.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetEnumerator">
            <summary>
                Returns an IEnumerator that iterates through the SqlDataReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetFloat(System.Int32)">
            <summary>
                Gets the value of the specified column as a single-precision floating point number.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetGuid(System.Int32)">
            <summary>
                Gets the value of the specified column as a globally unique identifier (GUID).
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetInt16(System.Int32)">
            <summary>
                Gets the value of the specified column as a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetInt32(System.Int32)">
            <summary>
                Gets the value of the specified column as a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetInt64(System.Int32)">
            <summary>
                Gets the value of the specified column as a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetString(System.Int32)">
            <summary>
                Gets the value of the specified column as a string.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetValue(System.Int32)">
            <summary>
                Gets the value of the specified column in its native format.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.GetValues(System.Object[])">
            <summary>
                Populates an array of objects with the column values of the current row.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.IsDBNull(System.Int32)">
            <summary>
                Gets a value that indicates whether the column contains non-existent or missing values.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.NextResult">
            <summary>
                Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.Close">
            <summary>
                Closes the SqlDataReader object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.Read">
            <summary>
                Advances the SqlDataReader to the next record.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDataReaderLoader.LoadAndClose">
            <summary>
                Converts a DbDataReader to an EFTableRows
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFDebugLogger">
            <summary>
                Formats and writes a debug log message.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDebugLogger.#ctor(Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFDebugLogger})">
            <summary>
                Formats and writes a debug log message.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFDebugLogger.IsLoggerEnabled">
            <summary>
                Determines whether the debug logger is enabled.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFDebugLogger.NotifyCacheableEvent(EFCoreSecondLevelCacheInterceptor.CacheableLogEventId,System.String)">
            <summary>
                If you set DisableLogging to false, this delegate will give you the internal caching events of the library.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider">
            <summary>
                Using ICacheManager as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider.#ctor(Microsoft.Extensions.Options.IOptions{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheSettings},System.IServiceProvider,EFCoreSecondLevelCacheInterceptor.IEFDebugLogger,Microsoft.Extensions.Logging.ILogger{EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider})">
            <summary>
                Using IMemoryCache as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider.InsertValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachedData,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider.ClearAllCachedEntries">
            <summary>
                Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider.GetValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFEasyCachingCoreProvider.InvalidateCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="cacheKey">Stores information of the computed key of the input LINQ query.</param>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheChangeTokenProvider">
            <summary>
                Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheChangeTokenProvider.#ctor">
            <summary>
                Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheChangeTokenProvider.GetChangeToken(System.String)">
            <summary>
                Gets or adds a change notification token.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheChangeTokenProvider.RemoveChangeToken(System.String)">
            <summary>
                Removes a change notification token.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheChangeTokenProvider.RemoveAllChangeTokens">
            <summary>
                Removes all of the change notification tokens.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider">
            <summary>
                Using IMemoryCache as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,EFCoreSecondLevelCacheInterceptor.IMemoryCacheChangeTokenProvider)">
            <summary>
                Using IMemoryCache as a cache service.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider.InsertValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachedData,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider.ClearAllCachedEntries">
            <summary>
                Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider.GetValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFMemoryCacheServiceProvider.InvalidateCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="cacheKey">Stores information of the computed key of the input LINQ query.</param>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFServiceCollectionExtensions">
            <summary>
                ServiceCollection Extensions
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFServiceCollectionExtensions.AddEFSecondLevelCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EFCoreSecondLevelCacheInterceptor.EFCoreSecondLevelCacheOptions})">
            <summary>
                Registers the required services of the EFCoreSecondLevelCacheInterceptor.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor">
            <summary>
                SqlCommands Utils
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor.#ctor(EFCoreSecondLevelCacheInterceptor.IEFHashProvider)">
            <summary>
                SqlCommands Utils
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor.IsCrudCommand(System.String)">
            <summary>
                Is `insert`, `update` or `delete`?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor.GetAllTableNames(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Returns all of the given context's table names.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor.GetSqlCommandTableNames(System.String)">
            <summary>
                Extracts the table names of an SQL command.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFSqlCommandsProcessor.GetSqlCommandEntityTypes(System.String,System.Collections.Generic.IList{EFCoreSecondLevelCacheInterceptor.TableEntityInfo})">
            <summary>
                Extracts the entity types of an SQL command.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo">
            <summary>
                TableColumn's Info
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo.Ordinal">
            <summary>
                The column's ordinal.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo.Name">
            <summary>
                The column's name.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo.DbTypeName">
            <summary>
                The column's DbType Name.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo.TypeName">
            <summary>
                The column's Type.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableColumnInfo.ToString">
            <summary>
                ToString
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFTableRow">
            <summary>
                TableRow's structure
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRow.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
                TableRow's structure
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRow.Values">
            <summary>
                An array of objects with the column values of the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRow.Depth">
            <summary>
                Gets or sets a value that indicates the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRow.FieldCount">
            <summary>
                Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRow.Item(System.Int32)">
            <summary>
                Returns Values[ordinal]
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFTableRows">
            <summary>
                TableRows structure
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.#ctor(System.Data.Common.DbDataReader)">
            <summary>
                TableRows structure
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.#ctor">
            <summary>
                TableRows structure
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.Rows">
            <summary>
                Rows of the table
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.ColumnsInfo">
            <summary>
                TableColumn's Info
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.FieldCount">
            <summary>
                Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.TableName">
            <summary>
                EFTableRows's unique ID
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.HasRows">
            <summary>
                Gets a value that indicates whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.RecordsAffected">
            <summary>
                Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.VisibleFieldCount">
            <summary>
                Gets the number of fields in the SqlDataReader that are not hidden.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.RowsCount">
            <summary>
                Number of Db rows.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRows.Item(System.Int32)">
            <summary>
                Gets or sets the Get(index)
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.Add(EFCoreSecondLevelCacheInterceptor.EFTableRow)">
            <summary>
                Adds an item to the EFTableRows
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.Get(System.Int32)">
            <summary>
                returns the value of the given index.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.GetOrdinal(System.String)">
            <summary>
                Gets the column ordinal, given the name of the column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.GetName(System.Int32)">
            <summary>
                Gets the name of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.GetDataTypeName(System.Int32)">
            <summary>
                Gets a string representing the data type of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.GetFieldType(System.Int32)">
            <summary>
                Gets the Type that is the data type of the object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRows.GetFieldTypeName(System.Int32)">
            <summary>
                Gets the Type that is the data type of the object.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader">
            <summary>
                Converts an EFTableRows to a DbDataReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.#ctor(EFCoreSecondLevelCacheInterceptor.EFTableRows)">
            <summary>
                Converts an EFTableRows to a DbDataReader.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.FieldCount">
            <summary>
                Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.HasRows">
            <summary>
                Gets a value that indicates whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.IsClosed">
            <summary>
                Retrieves a Boolean value that indicates whether the specified SqlDataReader instance has been closed.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.Depth">
            <summary>
                Gets a value that indicates the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.RecordsAffected">
            <summary>
                Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.TableName">
            <summary>
                The TableName's unique ID.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.Item(System.String)">
            <summary>
                Returns GetValue(GetOrdinal(name))
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.Item(System.Int32)">
            <summary>
                Returns GetValue(ordinal)
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetDataTypeName(System.Int32)">
            <summary>
                Gets a string representing the data type of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetFieldType(System.Int32)">
            <summary>
                Gets the Type that is the data type of the object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetName(System.Int32)">
            <summary>
                Gets the name of the specified column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetOrdinal(System.String)">
            <summary>
                Gets the column ordinal, given the name of the column.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetSchemaTable">
            <summary>
                Returns a DataTable that describes the column metadata of the SqlDataReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.NextResult">
            <summary>
                Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.Close">
            <summary>
                Closes the SqlDataReader object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.Read">
            <summary>
                Advances the SqlDataReader to the next record.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetBoolean(System.Int32)">
            <summary>
                Gets the value of the specified column as a Boolean.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetByte(System.Int32)">
            <summary>
                Gets the value of the specified column as a byte.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer
                offset.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetChar(System.Int32)">
            <summary>
                Gets the value of the specified column as a single character.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads a stream of characters from the specified column offset into the buffer as an array starting at the given
                buffer offset.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetDateTime(System.Int32)">
            <summary>
                Gets the value of the specified column as a DateTime object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetDecimal(System.Int32)">
            <summary>
                Gets the value of the specified column as a Decimal object.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetDouble(System.Int32)">
            <summary>
                Gets the value of the specified column as a double-precision floating point number.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetEnumerator">
            <summary>
                Returns an IEnumerator that iterates through the SqlDataReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetFloat(System.Int32)">
            <summary>
                Gets the value of the specified column as a single-precision floating point number.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetGuid(System.Int32)">
            <summary>
                Gets the value of the specified column as a globally unique identifier (GUID).
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetInt16(System.Int32)">
            <summary>
                Gets the value of the specified column as a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetInt32(System.Int32)">
            <summary>
                Gets the value of the specified column as a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetInt64(System.Int32)">
            <summary>
                Gets the value of the specified column as a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetString(System.Int32)">
            <summary>
                Gets the value of the specified column as a string.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetValue(System.Int32)">
            <summary>
                Gets the value of the specified column in its native format.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetFieldValue``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.GetValues(System.Object[])">
            <summary>
                Populates an array of objects with the column values of the current row.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.EFTableRowsDataReader.IsDBNull(System.Int32)">
            <summary>
                Gets a value that indicates whether the column contains non-existent or missing values.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IDbCommandInterceptorProcessor">
            <summary>
                Helps processing SecondLevelCacheInterceptor
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IDbCommandInterceptorProcessor.ProcessExecutedCommands``1(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,``0)">
            <summary>
                Reads data from cache or cache it and then returns the result
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IDbCommandInterceptorProcessor.ProcessExecutingCommands``1(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,``0)">
            <summary>
                Adds command's data to the cache
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor">
            <summary>
                Cache Dependencies Calculator
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor.GetCacheDependencies(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Finds the related table names of the current query.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor.GetCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCachePolicy,System.Collections.Generic.SortedSet{System.String},System.String)">
            <summary>
                Finds the related table names of the current query.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheDependenciesProcessor.InvalidateCacheDependencies(System.String,EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCacheKeyPrefixProvider">
            <summary>
                A custom cache key prefix provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheKeyPrefixProvider.GetCacheKeyPrefix">
            <summary>
                returns the current provided cache key prefix
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCacheKeyProvider">
            <summary>
                A custom cache key provider for EF queries.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheKeyProvider.GetEFCacheKey(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets an EF query and returns its hashed key to store in the cache.
            </summary>
            <param name="command">The EF query.</param>
            <param name="context">DbContext is a combination of the Unit Of Work and Repository patterns.</param>
            <param name="cachePolicy">determines the Expiration time of the cache.</param>
            <returns>Information of the computed key of the input LINQ query.</returns>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser">
            <summary>
                EFCachePolicy Parser Utils
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser.GetEFCachePolicy(System.String,System.Collections.Generic.IList{EFCoreSecondLevelCacheInterceptor.TableEntityInfo})">
            <summary>
                Converts the `commandText` to an instance of `EFCachePolicy`
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser.HasEFCachePolicy(System.String)">
            <summary>
                Does `commandText` contain EFCachePolicyTagPrefix?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCachePolicyParser.RemoveEFCachePolicyTag(System.String)">
            <summary>
                Removes the EFCachePolicy line from the commandText
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceCheck">
            <summary>
                Is the configured cache provider online?
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceCheck.IsCacheServiceAvailable">
            <summary>
                Is the configured cache services online and available? Can we use it without any problem?
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider">
            <summary>
                Cache Service Provider Contract.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider.ClearAllCachedEntries">
            <summary>
                Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider.GetValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider.InsertValue(EFCoreSecondLevelCacheInterceptor.EFCacheKey,EFCoreSecondLevelCacheInterceptor.EFCachedData,EFCoreSecondLevelCacheInterceptor.EFCachePolicy)">
            <summary>
                Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="cachePolicy">Defines the expiration mode of the cache item.</param>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFCacheServiceProvider.InvalidateCacheDependencies(EFCoreSecondLevelCacheInterceptor.EFCacheKey)">
            <summary>
                Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="cacheKey">Stores information of the computed key of the input LINQ query.</param>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFDebugLogger">
            <summary>
                Formats and writes a debug log message.
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.IEFDebugLogger.IsLoggerEnabled">
            <summary>
                Determines whether the debug logger is enabled.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFDebugLogger.NotifyCacheableEvent(EFCoreSecondLevelCacheInterceptor.CacheableLogEventId,System.String)">
            <summary>
                If you set DisableLogging to false, this delegate will give you the internal caching events of the library.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFHashProvider">
            <summary>
                A hash provider contract
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFHashProvider.ComputeHash(System.String)">
            <summary>
                Computes the Hash of the input string.
            </summary>
            <param name="data">the input string</param>
            <returns>Hash</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFHashProvider.ComputeHash(System.Byte[])">
            <summary>
                Computes the hash of the input array.
            </summary>
            <param name="data">the input array</param>
            <returns>Hash</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFHashProvider.ComputeHash(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
                Computes the hash of the input byte array.
            </summary>
            <param name="data">the input byte array</param>
            <param name="offset">start offset</param>
            <param name="len">length</param>
            <param name="seed">initial seed</param>
            <returns>Hash</returns>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor">
            <summary>
                SqlCommands Utils
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor.GetSqlCommandTableNames(System.String)">
            <summary>
                Extracts the table names of an SQL command.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor.GetSqlCommandEntityTypes(System.String,System.Collections.Generic.IList{EFCoreSecondLevelCacheInterceptor.TableEntityInfo})">
            <summary>
                Extracts the entity types of an SQL command.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor.GetAllTableNames(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Returns all of the given context's table names.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IEFSqlCommandsProcessor.IsCrudCommand(System.String)">
            <summary>
                Is `insert`, `update` or `delete`?
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.ILockProvider">
            <summary>
                Reader writer locking service
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.ILockProvider.Lock(System.Threading.CancellationToken)">
            <summary>
                Tries to enter the sync lock
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.ILockProvider.LockAsync(System.Threading.CancellationToken)">
            <summary>
                Tries to enter the async lock
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.IMemoryCacheChangeTokenProvider">
            <summary>
                Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IMemoryCacheChangeTokenProvider.GetChangeToken(System.String)">
            <summary>
                Gets or adds a change notification token.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IMemoryCacheChangeTokenProvider.RemoveChangeToken(System.String)">
            <summary>
                Removes a change notification token.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.IMemoryCacheChangeTokenProvider.RemoveAllChangeTokens">
            <summary>
                Removes all of the change notification tokens.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.LockProvider">
            <summary>
                Reader writer locking service
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.LockProvider.Lock(System.Threading.CancellationToken)">
            <summary>
                Tries to enter the sync lock
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.LockProvider.LockAsync(System.Threading.CancellationToken)">
            <summary>
                Tries to enter the async lock
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.LockProvider.Dispose">
            <summary>
                Disposes the lock
            </summary>    
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor">
            <summary>
                Entity Framework Core Second Level Caching Library
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.#ctor(EFCoreSecondLevelCacheInterceptor.IDbCommandInterceptorProcessor,EFCoreSecondLevelCacheInterceptor.ILockProvider)">
            <summary>
                Entity Framework Core Second Level Caching Library
                Please use
                services.AddDbContextPool&lt;ApplicationDbContext&gt;((serviceProvider, optionsBuilder) =&gt;
                optionsBuilder.UseSqlServer(...).AddInterceptors(serviceProvider.GetRequiredService&lt;SecondLevelCacheInterceptor
                &gt;()));
                to register it.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteNonQuery
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.NonQueryExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteNonQueryAsync.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteNonQuery.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteNonQueryAsync.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ReaderExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ReaderExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteReaderAsync.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteReader.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteReaderAsync.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ScalarExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteScalar.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ScalarExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls System.Data.Common.DbCommand.ExecuteScalarAsync.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteScalar.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SecondLevelCacheInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call System.Data.Common.DbCommand.ExecuteScalarAsync.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.SkipCacheSpecificQueriesOptions">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.SkipCacheSpecificQueriesOptions.#ctor(System.Collections.Generic.IList{System.Type})">
            <summary>
                CacheAllQueries Options
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.SkipCacheSpecificQueriesOptions.EntityTypes">
            <summary>
                Given entity types to cache
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.SkipCacheSpecificQueriesOptions.TableNames">
            <summary>
                Given table names to cache
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.StringExtensions">
            <summary>
                Missing NET4_6_2 exts
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.EndsWith(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
                Determines if a collection contains an item which ends with the given value
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.StartsWith(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
                Determines if a collection contains an item which starts with the given value
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.ContainsEvery(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
            <summary>
                Determines if a collection exclusively contains every item in the given collection
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.ContainsOnly(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
            <summary>
                Determines if a collection contains items only in the given collection
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided comparison type.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided comparison type.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.StringExtensions.GetHashCode(System.String,System.StringComparison)">
            <summary>
            Returns the hash code for this string using the specified rules.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.TableEntityInfo">
            <summary>
                A Table's EntityInfo
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.TableEntityInfo.ClrType">
            <summary>
                Gets the CLR class that is used to represent instances of this type.
                Returns null if the type does not have a corresponding CLR class (known as a shadow type).
            </summary>
        </member>
        <member name="P:EFCoreSecondLevelCacheInterceptor.TableEntityInfo.TableName">
            <summary>
                The Corresponding table's name.
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.TableEntityInfo.ToString">
            <summary>
                Debug info.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.TableNameComparison">
            <summary>
                How should we determine which tables should be cached?
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.Contains">
            <summary>
                Caches queries containing table names having the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.DoesNotContain">
            <summary>
                Caches queries containing table names not having the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.EndsWith">
            <summary>
                Caches queries containing table names end with the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.DoesNotEndWith">
            <summary>
                Caches queries containing table names which do not end with the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.StartsWith">
            <summary>
                Caches queries containing table names start with the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.DoesNotStartWith">
            <summary>
                Caches queries containing table names which do not start with the specified names.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.ContainsOnly">
            <summary>
                Caches queries containing table names equal to the specified names exclusively.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.ContainsEvery">
            <summary>
                Caches queries containing table names equal to every one of the specified names exclusively.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableNameComparison.DoesNotContainEvery">
            <summary>
                Caches queries containing table names not equal to every one of the specified names exclusively.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.TableTypeComparison">
            <summary>
                How should we determine which tables should be cached?
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableTypeComparison.Contains">
            <summary>
                Caches queries containing table types having the specified types.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableTypeComparison.DoesNotContain">
            <summary>
                Caches queries containing table types not having the specified types.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableTypeComparison.ContainsOnly">
            <summary>
                Caches queries containing table types equal to the specified types exclusively.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableTypeComparison.ContainsEvery">
            <summary>
                Caches queries containing table types equal to every one of the specified types exclusively.
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TableTypeComparison.DoesNotContainEvery">
            <summary>
                Caches queries containing table types not equal to every one of the specified types exclusively.
            </summary>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.TypeExtensions">
            <summary>
                Type Helper utilities
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.LongType">
            <summary>
                Cached version of typeof(long)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.UlongTYpe">
            <summary>
                Cached version of typeof(ulong)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.BoolType">
            <summary>
                Cached version of typeof(bool)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.ByteType">
            <summary>
                Cached version of typeof(byte)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.StringType">
            <summary>
                Cached version of typeof(string)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.DateTimeType">
            <summary>
                Cached version of typeof(DateTime)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.DecimalType">
            <summary>
                Cached version of typeof(decimal)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.DoubleType">
            <summary>
                Cached version of typeof(double)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.FloatType">
            <summary>
                Cached version of typeof(float)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.ByteArrayType">
            <summary>
                Cached version of typeof(byte[])
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.ShortType">
            <summary>
                Cached version of typeof(short)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.IntType">
            <summary>
                Cached version of typeof(int)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.DateTimeOffsetType">
            <summary>
                Cached version of typeof(DateTimeOffset)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.TimeSpanType">
            <summary>
                Cached version of typeof(TimeSpan)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.UintType">
            <summary>
                Cached version of typeof(uint)
            </summary>
        </member>
        <member name="F:EFCoreSecondLevelCacheInterceptor.TypeExtensions.CharType">
            <summary>
                Cached version of typeof(char)
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.TypeExtensions.IsNull(System.Object)">
            <summary>
                Check value is DBNull
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.TypeExtensions.IsArrayOrGenericList(System.Type)">
            <summary>
                IsGenericType or IsArray
            </summary>
            <param name="expectedValueType"></param>
            <returns></returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.TypeExtensions.IsNumber(System.Type)">
            <summary>
                Is it a number type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EFCoreSecondLevelCacheInterceptor.XxHash64Unsafe">
            <summary>
                xxHash is an extremely fast non-cryptographic Hash algorithm, working at speeds close to RAM limits.
                https://github.com/Cyan4973/xxHash
            </summary>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.XxHash64Unsafe.ComputeHash(System.String)">
            <summary>
                Computes the xxHash64 of the input string. xxHash64 is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input string</param>
            <returns>xxHash64</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.XxHash64Unsafe.ComputeHash(System.Byte[])">
            <summary>
                Computes the xxHash64 of the input array. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input array</param>
            <returns>xxHash64</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.XxHash64Unsafe.ComputeHash(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
                Computes the xxHash64 of the input byte array. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input byte array</param>
            <param name="offset">start offset</param>
            <param name="len">length</param>
            <param name="seed">initial seed</param>
            <returns>xxHash64</returns>
        </member>
        <member name="M:EFCoreSecondLevelCacheInterceptor.XxHash64Unsafe.ComputeHash(System.Byte*,System.Int32,System.UInt64)">
            <summary>
                Computes the xxHash64 of the input string. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="ptr"></param>
            <param name="length"></param>
            <param name="seed"></param>
            <returns>xxHash</returns>
        </member>
    </members>
</doc>
