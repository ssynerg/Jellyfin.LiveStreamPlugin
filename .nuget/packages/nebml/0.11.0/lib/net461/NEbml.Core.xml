<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NEbml.Core</name>
    </assembly>
    <members>
        <member name="T:NEbml.Core.DTDBase">
            <summary>
            Root class for Ebml type schema
            </summary>
        </member>
        <member name="T:NEbml.Core.StandardDtd">
            <summary>
            Appendix C. EBML Standard definitions.
            </summary>
        </member>
        <member name="T:NEbml.Core.EbmlDataFormatException">
            <summary>
            Thrown to indicate the EBML data format violation.
            </summary>
        </member>
        <member name="T:NEbml.Core.EbmlReader">
            <summary>
            The <code>EbmlReader</code> interface allows forward, read-only access to EBML data.
            </summary>
        </member>
        <member name="M:NEbml.Core.EbmlReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new EBML reader.
            </summary>
            <param name="source">the source of bytes</param>
            <exception cref="T:System.ArgumentNullException">if <code>source</code> is <code>null</code></exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Creates a new EBML reader.
            </summary>
            <param name="source">the source of bytes</param>
            <param name="size">the maximum number of bytes to read from the source</param>
            <exception cref="T:System.ArgumentNullException">if <code>source</code> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">if <code>size</code> is negative</exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadNext">
            <summary>
            Reads the next child element of the current container and positions the stream at the beginning of the element data.
            </summary>
            <returns><code>true</code> if the child element is available; <code>false</code> otherwise</returns>
            <exception cref="T:NEbml.Core.EbmlDataFormatException">if the value of the element identifier or element data size read from the stream is reserved</exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadAt(System.Int64)">
            <summary>
            Reads the next child element of the current container at the specified position and positions the stream at the beginning of the element data.
            </summary>
            <param name="position">The exact position in the current container to read the next element from.</param>
            <returns><code>true</code> if the child element is available; <code>false</code> otherwise</returns>
            <exception cref="T:NEbml.Core.EbmlDataFormatException">if the value of the element identifier or element data size read from the stream is reserved</exception>
        </member>
        <member name="P:NEbml.Core.EbmlReader.ElementId">
            <summary>
            Returns the identifier of the current element.
            </summary>
            <value>the element identifier</value>
            <exception cref="T:System.InvalidOperationException">if the current element is not available</exception>
        </member>
        <member name="P:NEbml.Core.EbmlReader.ElementSize">
            <summary>
            Returns the data size of the current element.
            </summary>
            <value>the element data size in the encoded form</value>
            <exception cref="T:System.InvalidOperationException">if the current element is not available</exception>
        </member>
        <member name="P:NEbml.Core.EbmlReader.ElementPosition">
            <summary>
            Gets starting position in file for current element
            </summary>
        </member>
        <member name="M:NEbml.Core.EbmlReader.EnterContainer">
            <summary>
            Instructs the reader to parse the current element data as sub-elements. The current container 
            will be saved on the stack and the current element will become the new container.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the current element is not available or if the element data was already accessed as some other type</exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.LeaveContainer">
            <summary>
            Instructs the reader to return to the previous container.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the current container represents the whole input source</exception>
            <exception cref="T:System.IO.EndOfStreamException">if the input source reaches the end before reading all the bytes</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadInt">
            <summary>
            Reads the element data as a signed integer.
            </summary>
            <returns>the element data as a signed integer</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadUInt">
            <summary>
            Reads the element data as an unsigned integer.
            </summary>
            <returns>the element data as an unsigned integer</returns>
            <exception cref="T:System.InvalidOperationException">if the current element is not available or if the element data was already accessed as some other type</exception>
            <exception cref="T:NEbml.Core.EbmlDataFormatException">if the element size is greater than <code>8</code></exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadFloat">
            <summary>
            Reads the element data as a floating-point number.
            
            If the element data size is equal to <code>4</code>, then an instance of the <code>Float</code> is returned. If
            the element data size is equal to <code>8</code>, then an instance of the <code>Double</code> is returned.
            </summary>
            <returns>the element data as a floating-point number</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadDate">
            <summary>
            Reads the element data as a date.
            </summary>
            <returns>the element data as a date</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadAscii">
            <summary>
            Reads the element data as an ASCII string.
            </summary>
            <returns>the element data as an ASCII string</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadUtf">
            <summary>
            Reads the element data as an UTF8 string.
            </summary>
            <returns>the element data as an UTF8 string</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the element data as binary.
            </summary>
            <param name="buffer">the buffer into which the data is read</param>
            <param name="offset">the start offset in <code>buffer</code> at which the data is written</param>
            <param name="length">the maximum number of bytes to read</param>
            <returns>the actual number of bytes read, or <code>-1</code> if the end of the element data is reached</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadFully(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads <code>length</code> bytes of data from the current element data into an array of bytes.
            </summary>
            <param name="buffer">the buffer into which the data is read</param>
            <param name="offset">the start offset in array <code>buffer</code> at which the data is written</param>
            <param name="length">the number of bytes to read</param>
        </member>
        <member name="M:NEbml.Core.EbmlReader.Skip(System.Int64)">
            <summary>
            Skips <code>length</code> bytes from an input stream.
            </summary>
            <param name="length">the number of bytes to skip</param>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadVarInt(System.Int32)">
            <summary>
            Reads the element data as a variable size integer.
            </summary>
            <returns>a variable size integer, or <code>null</code> if the end of the input source is reached</returns>
            <exception cref="T:NEbml.Core.EbmlDataFormatException">if the input source contains length descriptor with zero value</exception>
            <exception cref="T:System.IO.EndOfStreamException">if the input source reaches the end before reading all the bytes</exception>
            <exception cref="T:System.IO.IOException">if an I/O error has occurred</exception>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadSignedIntegerUnsafe(System.Int32)">
            <summary>
            Reads the element data as a signed integer.
            </summary>
            <param name="length">the number of bytes to read</param>
            <returns>the element data as a signed integer</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadUnsignedIntegerUnsafe(System.Int32)">
            <summary>
            Reads the element data as an unsigned integer.
            </summary>
            <param name="length">the number of bytes to read</param>
            <returns>the element data as an unsigned integer</returns>
        </member>
        <member name="M:NEbml.Core.EbmlReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads the element data as a string in the specified charset.
            </summary>
            <param name="decoder">the name of the charset to be used to decode the bytes</param>
            <returns>the element data as a string</returns>
        </member>
        <member name="T:NEbml.Core.EbmlWriter">
            <summary>
            Writes EBML file
            </summary>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the EbmlWriter class
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.StartMasterElement(NEbml.Core.VInt)">
            <summary>
            Starts nested stream. Upon disposal of nested stream, the size is calculated and written to nested element header.
            Example:
            using(var data = writer.StartMasterElement(InnerDataElementId))
            {
                data.WriteInt(DataItem1Id, 139874)
                data.WriteUtf(DataItem2Id, "Hello world");
            }
            </summary>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.WriteElementHeader(NEbml.Core.VInt,NEbml.Core.VInt)">
            <summary>
            Writes element header
            </summary>
            <param name="elementId"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.Int64)">
            <summary>
            Writes signed integer value
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.UInt64)">
            <summary>
            Writes unsigned integer value
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.DateTime)">
            <summary>
            Writes datetime value
            </summary>
            <param name="elementId"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.Single)">
            <summary>
            Writes floating point number
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.Double)">
            <summary>
            Writes floating point number with double precision
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes binary data
            </summary>
            <param name="elementId"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(NEbml.Core.VInt,System.Byte[])">
            <summary>
            Writes binary data
            </summary>
            <param name="elementId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.WriteAscii(NEbml.Core.VInt,System.String)">
            <summary>
            Writes string in ASCII encoding
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.WriteUtf(NEbml.Core.VInt,System.String)">
            <summary>
            Writes string in UTF-8 encoding
            </summary>
            <param name="elementId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.EbmlWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes raw binary data
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:NEbml.Core.ElementDescriptor">
            <summary>
            Defines the EBML element description.
            </summary>
        </member>
        <member name="M:NEbml.Core.ElementDescriptor.#ctor(System.UInt64,System.String,NEbml.Core.ElementType)">
            <summary>
            Initializes a new instance of the <code>ElementDescriptor</code> class.
            </summary>
            <param name="identifier"></param>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:NEbml.Core.ElementDescriptor.#ctor(System.Int64,System.String,NEbml.Core.ElementType)">
            <summary>
            Initializes a new instance of the <code>ElementDescriptor</code> class.
            </summary>
            <param name="identifier"></param>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:NEbml.Core.ElementDescriptor.#ctor(NEbml.Core.VInt,System.String,NEbml.Core.ElementType)">
            <summary>
            Initializes a new instance of the <code>ElementDescriptor</code> class.
            </summary>
            <param name="identifier">the element identifier</param>
            <param name="name">the element name or <code>null</code> if the name is not known</param>
            <param name="type">the element type or <code>null</code> if the type is not known</param>
            <exception cref="T:System.ArgumentNullException">if <code>identifier</code> is <code>null</code></exception>
        </member>
        <member name="P:NEbml.Core.ElementDescriptor.Identifier">
            <summary>
            Returns the element identifier.
            </summary>
            <value>the element identifier in the encoded form</value>
        </member>
        <member name="P:NEbml.Core.ElementDescriptor.Name">
            <summary>
            Returns the element name.
            </summary>
            <value>the element name or &lt;code&gt;null&lt;/code&gt; if the name is not known</value>
        </member>
        <member name="P:NEbml.Core.ElementDescriptor.Type">
            <summary>
            Returns the element type.
            </summary>
            <value>the element type or &lt;code&gt;null&lt;/code&gt; if the type is not known</value>
        </member>
        <member name="M:NEbml.Core.ElementDescriptor.Named(System.String)">
            <summary>
            Returns a new descriptor with updated name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NEbml.Core.ElementType">
            <summary>
            Defines the EBML element types
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.SignedInteger">
            <summary>
            The signed integer
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.UnsignedInteger">
            <summary>
            The unsigned integer
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.Float">
            <summary>
            The floating point number
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.AsciiString">
            <summary>
            The character string in the ASCII encoding
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.Utf8String">
            <summary>
            The character string in the UTF-8 encoding
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.Date">
            <summary>
            The date
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.Binary">
            <summary>
            The binary data
            </summary>
        </member>
        <member name="F:NEbml.Core.ElementType.MasterElement">
            <summary>
            Contains other EBML sub-elements of the next lower level
            </summary>
        </member>
        <member name="T:NEbml.Core.MasterBlockWriter">
            <summary>
            Supplementary EbmlWriter implementation for use with StartMasterElement method
            </summary>
        </member>
        <member name="M:NEbml.Core.MasterBlockWriter.FlushData">
            <summary>
            Flushed the writer data to master stream
            </summary>
        </member>
        <member name="T:NEbml.Core.VInt">
            <summary>
            Variable size integer implementation as of http://www.matroska.org/technical/specs/rfc/index.html
            </summary>
        </member>
        <member name="P:NEbml.Core.VInt.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:NEbml.Core.VInt.IsReserved">
            <summary>
            Gets true if value is reserved (i.e. all data bits are zeros or 1's)
            </summary>
        </member>
        <member name="P:NEbml.Core.VInt.IsValidIdentifier">
            <summary>
            Gets true if value is correct identifier
            </summary>
        </member>
        <member name="P:NEbml.Core.VInt.EncodedValue">
            <summary>
            Gets the encoded value.
            </summary>
        </member>
        <member name="P:NEbml.Core.VInt.Length">
            <summary>
            Gets the encoded value's length
            </summary>
        </member>
        <member name="M:NEbml.Core.VInt.EncodeSize(System.UInt64,System.Int32)">
            <summary>
            Returns VInt value with specific encoded value with a specific length.
            </summary>
            <param name="value">(Size) value to be encoded.</param>
            <param name="length">VInt length to store value to.</param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.VInt.MakeId(System.UInt32)">
            <summary>
            
            </summary>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.VInt.UnknownSize(System.Int32)">
            <summary>
            Creates VInt for unknown size (all databits are 1's)
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.VInt.FromEncoded(System.UInt64)">
            <summary>
            Constructs the VInt value from its encoded form
            </summary>
            <param name="encodedValue"></param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.VInt.Read(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads the value from the stream
            </summary>
            <param name="source"></param>
            <param name="maxLength">Maximal expected length (either 4 or 8)</param>
            <param name="buffer">The buffer for optimization purposes. Must match the maxlength</param>
            <returns></returns>
        </member>
        <member name="M:NEbml.Core.VInt.Write(System.IO.Stream)">
            <summary>
            Writes value to stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="F:NEbml.Core.VInt.DataBitsMask">
            <summary>
            Maps length to data bits mask
            </summary>
        </member>
        <member name="F:NEbml.Core.VInt.MaxSizeValue">
            <summary>
            All 1's is reserved for unknown size
            </summary>
        </member>
    </members>
</doc>
