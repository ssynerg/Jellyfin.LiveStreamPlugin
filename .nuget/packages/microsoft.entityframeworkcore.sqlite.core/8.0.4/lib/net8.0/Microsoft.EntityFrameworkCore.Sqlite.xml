<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.EntityFrameworkCore.Sqlite</name>
    </assembly>
    <members>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteCSharpRuntimeAnnotationCodeGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteCSharpRuntimeAnnotationCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorDependencies,Microsoft.EntityFrameworkCore.Design.Internal.RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteDesignTimeServices">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Design.Internal.SqliteDesignTimeServices.ConfigureDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogSchemaConfigured">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogSequenceConfigured">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogUsingSchemaSelectionsWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundForeignKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogForeignKeyScaffoldErrorPrincipalTableNotFound">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogMissingTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogPrincipalColumnNotFound">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundIndex">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundPrimaryKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFoundUniqueConstraint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogUnexpectedConnectionType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogTableRebuildPendingWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogCompositeKeyWithValueGeneration">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogInferringTypes">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogOutOfRangeWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.SqliteLoggingDefinitions.LogFormatWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.TableRebuildEventData">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.TableRebuildEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Type,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.TableRebuildEventData.OperationType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.TableRebuildEventData.TableName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.UnexpectedConnectionTypeEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.UnexpectedConnectionTypeWarning" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.UnexpectedConnectionTypeEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Type)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <param name="messageGenerator">A delegate that generates a log message for this event.</param>
            <param name="connectionType">The connection type.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.UnexpectedConnectionTypeEventData.ConnectionType">
            <summary>
                The connection type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.SchemaConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.SequenceConfiguredWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IReadOnlySequence)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.SchemasNotSupportedWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.ForeignKeyReferencesMissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.Int64,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.UnexpectedConnectionTypeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure},System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.TableRebuildPendingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},System.Type,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.CompositeKeyWithValueGeneration(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Logs the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.CompositeKeyWithValueGeneration" /> event.
            </summary>
            <param name="diagnostics">The diagnostics logger to use.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.InferringTypes(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.OutOfRangeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteLoggerExtensions.FormatWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.AggregateOperationNotSupported(System.Object,System.Object)">
            <summary>
                SQLite cannot apply aggregate operator '{aggregateOperator}' on expressions of type '{type}'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.ApplyNotSupported">
            <summary>
                Translating this query requires the SQL APPLY operation, which is not supported on SQLite.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.DefaultNotSupported">
            <summary>
                Translating this operation requires the 'DEFAULT', which is not supported on SQLite.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.DuplicateColumnNameSridMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different SRIDs.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.IncompatibleSqlReturningClauseMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{entityTypeWithSqlReturningClause}' is configured to use the SQL RETURNING clause, but entity type '{entityTypeWithoutSqlReturningClause}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.InvalidMigrationOperation(System.Object)">
            <summary>
                SQLite does not support this migration operation ('{operation}'). See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.QueryingIntoJsonCollectionsNotSupported(System.Object)">
            <summary>
                SQLite version {sqliteVersion} is being used, but version 3.38.0 or higher is required for querying into JSON collections.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.MigrationScriptGenerationNotSupported">
            <summary>
                Generating idempotent scripts for migrations is not currently supported for SQLite. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.OrderByNotSupported(System.Object)">
            <summary>
                SQLite does not support expressions of type '{type}' in ORDER BY clauses. Convert the values to a supported type, or use LINQ to Objects to order the results on the client side.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.SequencesNotSupported">
            <summary>
                SQLite does not support sequences. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteStrings.StoredProceduresNotSupported(System.Object)">
            <summary>
                SQLite does not support stored procedures, but one has been configured on entity type '{entityType}'. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogCompositeKeyWithValueGeneration(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The entity type '{entityType}' has composite key '{key}' which is configured to use generated values. SQLite does not support generated values on composite keys.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogForeignKeyScaffoldErrorPrincipalTableNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key with identity '{id}' on table '{tableName}' since principal table '{principalTableName}' was not found in the model. This usually happens when the principal table was not included in the selection set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFormatWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The column '{columnName}' on table '{tableName}' should map to a property of type '{type}', but its values are in an incompatible format. Using a different type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found column on table '{tableName}' with name: '{columnName}', data type: {dataType}, not nullable: {notNullable}, default value: {defaultValue}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundForeignKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found foreign key on table '{tableName}', id: {id}, principal table: {principalTableName}, delete action: {deleteAction}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundIndex(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found index on table '{tableName}' with name '{indexName}', is unique: {isUnique}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundPrimaryKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found primary key on table '{tableName}' with name {primaryKeyName}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found table with name: '{name}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogFoundUniqueConstraint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found unique constraint on table '{tableName}' with name: {uniqueConstraintName}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogInferringTypes(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Querying table '{tableName}' to determine an appropriate CLR type for each column.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogMissingTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a table in the database matching the selected table '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogOutOfRangeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The column '{columnName}' on table '{tableName}' should map to a property of type '{type}', but its values are out of range. Using a different type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogPrincipalColumnNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key with identity '{id}' on table '{tableName}', since the principal column '{principalColumnName}' on the foreign key's principal table, '{principalTableName}', was not found in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogSchemaConfigured(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The entity type '{entityType}' is configured to use schema '{schema}', but SQLite does not support schemas. This configuration will be ignored by the SQLite provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogSequenceConfigured(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The model was configured with the database sequence '{sequence}'. SQLite does not support sequences.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogTableRebuildPendingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An operation of type '{operationType}' will be attempted while a rebuild of table '{tableName}' is pending. The database may not be in an expected state. Review the SQL generated by this migration to help diagnose any failures. Consider moving these operations to a subsequent migration.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogUnexpectedConnectionType(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                A connection of an unexpected type ({type}) is being used. The SQL functions prefixed with 'ef_' could not be created automatically. Manually define them if you encounter errors while querying.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Internal.SqliteResources.LogUsingSchemaSelectionsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                SQLite doesn't support schemas. The specified schema selection arguments will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies,Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateNoSchemas(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateNoSequences(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateNoStoredProcedures(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateValueGeneration(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteModelValidator.ValidateSharedTableCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.#ctor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.Clone">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.LoadSpatialite">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.WithLoadSpatialite(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Infrastructure.Internal.SqliteOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.Prefix">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.LegacyAutoincrement">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.Autoincrement">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.InlinePrimaryKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.InlinePrimaryKeyName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.InitSpatialMetaData">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.Srid">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationNames.UseSqlReturningClause">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationProvider.#ctor(Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal.SqliteAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IColumn,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.ExistsSql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.InterpretExistsResult(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.GetCreateIfNotExistsScript">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Migrations.Internal.SqliteHistoryRepository.GetEndIfScript">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteAggregateMethodCallTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteAggregateMethodCallTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProviderDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteByteArrayMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteByteArrayMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteByteArrayMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteCharMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteCharMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteCharMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateTimeMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteGlobMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteGlobMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteGlobMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteHexMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteHexMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteHexMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMathTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMathTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMathTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMemberTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMemberTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMethodCallTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteMethodCallTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteObjectToStringTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteObjectToStringTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteObjectToStringTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessor.ProcessSqlNullability(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory.Create(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableAggregateMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableAggregateMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableAggregateMethodTranslator.Translate(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.ApplyTypeMappingsOnJsonEachExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.ApplyJsonSqlConversion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Wraps the given expression with any SQL logic necessary to convert a value coming out of a JSON document into the relational value
                represented by the given type mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitorFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitorFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.GetOperator(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.GenerateSetOperationOperand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.GenerateJsonEach(Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.VisitJsonScalar(Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGenerator.TryGetOperatorInfo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Int32@,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGeneratorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGeneratorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGeneratorFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQuerySqlGeneratorFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryStringFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryStringFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryStringFactory.Create(System.Data.Common.DbCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessor.Process(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessorFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessorFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryTranslationPostprocessorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRandomTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRandomTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRandomTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRegexMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRegexMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteRegexMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Strftime(System.Type,System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Date(System.Type,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Glob(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Regexp(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitCustomSqlExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitGlob(Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression,System.Boolean,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitRegexp(Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression,System.Boolean,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.IsCollectionTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.Linq.Expressions.Expression@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.UpdateParameterCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitorFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringAggregateMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringAggregateMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringAggregateMethodTranslator.Translate(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringLengthTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringLengthTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringLengthTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteStringMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSubstrMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSubstrMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSubstrMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.TypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.Match">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.Pattern">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression">
            <summary>
                An expression that represents a SQLite json_each function call in a SQL tree.
            </summary>
            <remarks>
                <para>
                    See <see href="https://www.sqlite.org/json1.html#jeach">json_each</see> for more information and examples.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.JsonExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.Path">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.PathSegment})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.PathSegment})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.Clone">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.JsonEachExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.TypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.Match">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.Pattern">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteCodeGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteCodeGenerator" /> class.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.Create(System.String,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.Create(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Scaffolding.Internal.SqliteDatabaseModelFactory.InferClrTypes(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.ISqliteRelationalConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                The implementation may depend on other services registered with any lifetime.
                The implementation does not need to be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.ISqliteRelationalConnection.CreateReadOnlyConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteByteArrayTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteByteArrayTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteByteArrayTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteByteArrayTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteByteArrayTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies,Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.ISqliteRelationalConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator.Exists">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator.HasTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDatabaseCreator.Delete">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateOnlyTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeOffsetTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDateTimeTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteDecimalTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGuidTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping" /> class.
            </summary>
            <param name="storeType">The name of the database type.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.GetDataReaderMethod">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.CustomizeDataReaderExpression(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.EscapeSqlLiteral(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteJsonTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateReadOnlyConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteSqlGenerationHelper">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteSqlGenerationHelper.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteSqlGenerationHelper.StartTransactionStatement">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteSqlGenerationHelper.DelimitIdentifier(System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping" /> class.
            </summary>
            <param name="storeType">The name of the database type.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType" /> to be used.</param>
            <param name="unicode">A value indicating whether the type should handle Unicode data or not.</param>
            <param name="size">The size of data the property is configured to store, or null if no size is configured.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping" /> class.
            </summary>
            <param name="parameters">Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteStringTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTimeOnlyTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTypeMappingSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTypeMappingSource.IsSpatialiteType(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteULongTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter">
            <summary>
                The Sqlite-specific JsonValueReaderWrite for byte[]. Generates the SQLite representation (e.g. X'0102') rather than base64, in order
                to match our SQLite non-JSON representation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.Byte[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter">
            <summary>
                The Sqlite-specific JsonValueReaderWrite for DateTime. Generates a ISO8601 string representation with a space instead of a T
                separating the date and time components, in order to match our SQLite non-JSON representation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeReaderWriter">
            <summary>
                The Sqlite-specific JsonValueReaderWrite for DateTime. Generates a ISO8601 string representation with a space instead of a T
                separating the date and time components, in order to match our SQLite non-JSON representation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeReaderWriter.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDecimalReaderWriter">
            <summary>
                The Sqlite-specific JsonValueReaderWrite for decimal. Generates a string representation instead of a JSON number, in order to match
                our SQLite non-JSON representation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDecimalReaderWriter.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDecimalReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDecimalReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.Decimal)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonGuidReaderWriter">
            <summary>
                The Sqlite-specific JsonValueReaderWrite for GUID. Generates an upper-case representation instead of the more standard lower-case
                one, in order to match our SQLite non-JSON representation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonGuidReaderWriter.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonGuidReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonGuidReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.Guid)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteLegacyUpdateSqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommand.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommand.#ctor(Microsoft.EntityFrameworkCore.Update.NonTrackedModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommand.ProcessSinglePropertyJsonUpdate(Microsoft.EntityFrameworkCore.Update.ColumnModificationParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandBatchFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandBatchFactory.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandBatchFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandBatchFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandFactory.CreateModificationCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteModificationCommandFactory.CreateNonTrackedModificationCommand(Microsoft.EntityFrameworkCore.Update.NonTrackedModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendInsertOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendUpdateOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendDeleteOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendIdentityWhereCondition(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IColumnModification)">
            <summary>
                Appends a <c>WHERE</c> condition for the identity (i.e. key value) of the given column.
            </summary>
            <param name="commandStringBuilder">The builder to which the SQL should be appended.</param>
            <param name="columnModification">The column for which the condition is being generated.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendSelectAffectedCountCommand(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>
                Appends a SQL command for selecting the number of rows affected.
            </summary>
            <param name="commandStringBuilder">The builder to which the SQL should be appended.</param>
            <param name="name">The name of the table.</param>
            <param name="schema">The table schema, or <see langword="null" /> to use the default schema.</param>
            <param name="commandPosition">The ordinal of the command for which rows affected it being returned.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for this command.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendRowsAffectedWhereCondition(System.Text.StringBuilder,System.Int32)">
            <summary>
                Appends a <c>WHERE</c> condition checking rows affected.
            </summary>
            <param name="commandStringBuilder">The builder to which the SQL should be appended.</param>
            <param name="expectedRowsAffected">The expected number of rows affected.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.GenerateNextSequenceValueOperation(System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Sqlite.Update.Internal.SqliteUpdateSqlGenerator.AppendUpdateColumnValue(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Update.IColumnModification,System.Text.StringBuilder,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId">
            <summary>
                Event IDs for SQLite events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
            </summary>
            <remarks>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-diagnostics">Logging, events, and diagnostics</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.SchemaConfiguredWarning">
            <summary>
                A schema was configured for an entity type, but SQLite does not support schemas.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.SequenceConfiguredWarning">
            <summary>
                A sequence was configured for an entity type, but SQLite does not support sequences.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.CompositeKeyWithValueGeneration">
            <summary>
                An entity type has composite key which is configured to use generated values. SQLite does not support generated values
                on composite keys.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.KeyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.UnexpectedConnectionTypeWarning">
            <summary>
                A connection of an unexpected type is being used.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Sqlite.Diagnostics.Internal.UnexpectedConnectionTypeEventData" />
                    payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.TableRebuildPendingWarning">
            <summary>
                An operation may fail due to a pending rebuild of the table.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.ColumnFound">
            <summary>
                A column was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.SchemasNotSupportedWarning">
            <summary>
                SQLite does not support schemas.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.ForeignKeyReferencesMissingTableWarning">
            <summary>
                A foreign key references a missing table.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.TableFound">
            <summary>
                A table was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.MissingTableWarning">
            <summary>
                The database is missing a table.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.ForeignKeyPrincipalColumnMissingWarning">
            <summary>
                A column referenced by a foreign key constraint was not found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.IndexFound">
            <summary>
                An index was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.ForeignKeyFound">
            <summary>
                A foreign key was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.PrimaryKeyFound">
            <summary>
                A primary key was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.UniqueConstraintFound">
            <summary>
                A unique constraint was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.InferringTypes">
            <summary>
                Inferring CLR types.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.OutOfRangeWarning">
            <summary>
                Values are out of range for the type.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqliteEventId.FormatWarning">
            <summary>
                Values are in an invalid format for the type.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteComplexTypePropertyBuilderExtensions">
            <summary>
                SQLite-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteComplexTypePropertyBuilderExtensions.HasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Int32)">
            <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteComplexTypePropertyBuilderExtensions.HasSrid``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Int32)">
            <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions">
            <summary>
                SQLite specific extension methods for <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDatabaseFacadeExtensions.IsSqlite(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Returns <see langword="true" /> if the database provider currently in use is the SQLite provider.
            </summary>
            <remarks>
                <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
            <param name="database">The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.</param>
            <returns><see langword="true" /> if SQLite is being used; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions">
            <summary>
                SQLite specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQLite database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions">
            <summary>
                Contains extension methods on <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> for the Microsoft.EntityFrameworkCore.Sqlite provider.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Glob(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)">
            <summary>
                Maps to the SQLite <c>glob</c> function which is similar to
                <see cref="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" /> but uses the file system globbing
                syntax instead.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="matchExpression">The string that is to be matched.</param>
            <param name="pattern">The pattern which may involve wildcards <c>*,?,[,^,-,]</c>.</param>
            <returns><see langword="true" /> if there is a match.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Hex(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[])">
            <summary>
                Maps to the SQLite <c>hex</c> function which returns a hexadecimal string representing the specified value.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="bytes">The binary value.</param>
            <returns>A hexadecimal string.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
                Maps to the SQLite <c>unhex</c> function which returns a BLOB representing decoding of the hexadecimal string.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="value">The hexadecimal string.</param>
            <returns>Decoded hexadecimal string as binary value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)">
            <summary>
                Maps to the SQLite <c>unhex</c> function which returns a BLOB representing decoding of the hexadecimal string.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="value">The hexadecimal string.</param>
            <param name="ignoreChars">Characters that are ignored in <paramref name="value" />.</param>
            <returns>Decoded hexadecimal string as binary value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[],System.Int32)">
            <summary>
                Maps to the SQLite <c>substr</c> function which returns a subarray of the specified value. The subarray starts
                at <paramref name="startIndex" /> and continues to the end of the value.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="bytes">The binary value.</param>
            <param name="startIndex">The 1-based starting index. If negative, the index is relative to the end of the value.</param>
            <returns>The subarray.</returns>
            <remarks>
                Use <see cref="M:System.String.Substring(System.Int32)" /> for string values.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Maps to the SQLite substr function which returns a subarray of the specified value. The subarray starts
                at <paramref name="startIndex" /> and has the specified <paramref name="length" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="bytes">The binary value.</param>
            <param name="startIndex">The 1-based starting index. If negative, the index is relative to the end of the value.</param>
            <param name="length">
                The length of the subarray. If negative, bytes preceding <paramref name="startIndex" /> are returned.
            </param>
            <returns>The subarray.</returns>
            <remarks>
                Use <see cref="M:System.String.Substring(System.Int32,System.Int32)" /> for string values.
            </remarks>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions">
            <summary>
                Entity type extension methods for Sqlite-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing Sqlite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.IsSqlReturningClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns><see langword="true" /> if the SQL RETURNING clause is used to save changes to the table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlReturningClause">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlReturningClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.GetUseSqlReturningClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for whether to use the SQL RETURNING clause when saving changes to the table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the memory-optimized setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.IsSqlReturningClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <returns><see langword="true" /> if the SQL RETURNING clause is used to save changes to the table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlReturningClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlReturningClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteEntityTypeMappingFragmentExtensions">
            <summary>
                SQLite specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeMappingFragmentExtensions.IsSqlReturningClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment)">
            <summary>
                Returns a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeMappingFragmentExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityTypeMappingFragment,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <param name="useSqlReturningClause">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeMappingFragmentExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <param name="useSqlReturningClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeMappingFragmentExtensions.GetUseSqlReturningClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment)">
            <summary>
                Gets the configuration source for whether to use the SQL RETURNING clause when saving changes to the associated table.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <returns>The configuration source for the configured value.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationBuilderExtensions">
            <summary>
                SQLite specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationBuilderExtensions.IsSqlite(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                Returns <see langword="true" /> if the database provider currently in use is the SQLite provider.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="migrationBuilder">
                The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or
                <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />.
            </param>
            <returns><see langword="true" /> if SQLite is being used; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator">
            <summary>
                SQLite-specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />.
            </summary>
            <remarks>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator" /> instance.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
            <param name="migrationsAnnotations">Provider-specific Migrations annotations to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Generates commands from a list of operations.
            </summary>
            <param name="operations">The operations.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="options">The options to use when generating commands.</param>
            <returns>The list of commands to be executed or scripted.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.CreateTableColumns(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the column definitions in a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.ColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition for the given column metadata.
            </summary>
            <param name="schema">The schema that contains the table, or <see langword="null" /> to use the default schema.</param>
            <param name="table">The table that contains the column.</param>
            <param name="name">The column name.</param>
            <param name="operation">The column metadata.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since this operation requires table rebuilds, which
                are not yet supported.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.ComputedColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a computed column definition for the given column metadata.
            </summary>
            <param name="schema">The schema that contains the table, or <see langword="null" /> to use the default schema.</param>
            <param name="table">The table that contains the column.</param>
            <param name="name">The column name.</param>
            <param name="operation">The column metadata.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Ignored, since schemas are not supported by SQLite and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Ignored, since schemas are not supported by SQLite and are silently ignored to improve testing compatibility.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since SQLite does not support sequences.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since SQLite does not support sequences.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since SQLite does not support sequences.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since SQLite does not support sequences.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqliteMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Throws <see cref="T:System.NotSupportedException" /> since SQLite does not support sequences.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions">
            <summary>
                SQLite-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32)">
            <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32)">
            <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.CanSetSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the SRID for the column.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="srid">The SRID.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the SRID for the column.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for SQLite metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions.GetSrid(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the SRID to use when creating a column for this property.
            </summary>
            <param name="property">The property.</param>
            <returns>The SRID to use when creating a column for this property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions.GetSrid(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the SRID to use when creating a column for this property.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The SRID to use when creating a column for this property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions.SetSrid(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
                Sets the SRID to use when creating a column for this property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The SRID.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions.SetSrid(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the SRID to use when creating a column for this property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The SRID.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlitePropertyExtensions.GetSridConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column SRID.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column SRID.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions">
            <summary>
                Sqlite-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder{``0},System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with  certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Boolean)">
            <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table. The RETURNING clause is incompatible with
                certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqliteTableExtensions">
            <summary>
                SQLite specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITable" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqliteTableExtensions.IsSqlReturningClauseUsed(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                Returns a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
            <param name="table">The table.</param>
            <returns><see langword="true" /> if the SQL RETURNING clause is used to save changes to the table.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.SpatialiteLoader">
            <summary>
                Finds and loads SpatiaLite.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SpatialiteLoader.TryLoad(System.Data.Common.DbConnection)">
            <summary>
                Tries to load the mod_spatialite extension into the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns><see langword="true" /> if the extension was loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SpatialiteLoader.Load(System.Data.Common.DbConnection)">
            <summary>
                Loads the mod_spatialite extension into the specified connection.
            </summary>
            <remarks>
                The extension will be loaded from native NuGet assets when available.
            </remarks>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder">
            <summary>
                Allows SQLite specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <remarks>
                <para>
                    Instances of this class are returned from a call to
                    <see
                        cref="M:Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder})" />
                    and it is not designed to be directly constructed in your application code.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder" /> class.
            </summary>
            <param name="optionsBuilder">The options builder.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder">
            <summary>
                A builder for building conventions for SQLite.
            </summary>
            <remarks>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> and multiple registrations
                    are allowed. This means that each <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own
                    set of instances of this service.
                    The implementations may depend on other services registered with any lifetime.
                    The implementations do not need to be thread-safe.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder" /> instance.
            </summary>
            <param name="dependencies">The core dependencies for this service.</param>
            <param name="relationalDependencies">The relational dependencies for this service.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder.CreateConventionSet">
            <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
            <returns>The convention set for the current database provider.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder.Build">
            <summary>
                Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" /> for SQLite when using
                the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <remarks>
                Note that it is unusual to use this method.
                Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
            </remarks>
            <returns>The convention set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteConventionSetBuilder.CreateModelBuilder">
            <summary>
                Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> for SQLite outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <remarks>
                Note that it is unusual to use this method.
                Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
            </remarks>
            <returns>The convention set.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteRuntimeModelConvention">
            <summary>
                A convention that creates an optimized copy of the mutable model.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteRuntimeModelConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteRuntimeModelConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteRuntimeModelConvention.ProcessPropertyAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty,System.Boolean)">
            <summary>
                Updates the property annotations that will be set on the read-only object.
            </summary>
            <param name="annotations">The annotations to be processed.</param>
            <param name="property">The source property.</param>
            <param name="runtimeProperty">The target property that will contain the annotations.</param>
            <param name="runtime">Indicates whether the given annotations are runtime annotations.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteSharedTableConvention">
            <summary>
                A convention that manipulates names of database objects for entity types that share a table to avoid clashes.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteSharedTableConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteSharedTableConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqliteSharedTableConvention.CheckConstraintsUniqueAcrossTables">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions">
            <summary>
                SQLite specific extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddSqlite``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
                Registers the given Entity Framework <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
                and configures it to connect to a SQLite database.
            </summary>
            <remarks>
                <para>
                    This method is a shortcut for configuring a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to use SQLite. It does not support all options.
                    Use <see cref="O:EntityFrameworkServiceCollectionExtensions.AddDbContext" /> and related methods for full control of
                    this process.
                </para>
                <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure the SQLite provider and connection string.
                </para>
                <para>
                    To configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> for the context, either override the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context, or supply
                    an optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
                </para>
            </remarks>
            <typeparam name="TContext">The type of context to be registered.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqliteOptionsAction">An optional action to allow additional SQLite specific configuration.</param>
            <param name="optionsAction">An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.</param>
            <returns>The same service collection so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddEntityFrameworkSqlite(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <para>
                    Adds the services required by the SQLite database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                </para>
                <para>
                    Warning: Do not call this method accidentally. It is much more likely you need
                    to call <see cref="M:Microsoft.Extensions.DependencyInjection.SqliteServiceCollectionExtensions.AddSqlite``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqliteDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})" />.
                </para>
            </summary>
            <remarks>
                Calling this method is no longer necessary when building most applications, including those that
                use dependency injection in ASP.NET or elsewhere.
                It is only needed when building the internal service provider for use with
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" /> method.
                This is not recommend other than for some advanced scenarios.
            </remarks>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.Visit(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})">
            <summary>
                Dispatches the list of expressions to one of the more specialized visit methods in this class.
            </summary>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The expressions to visit.</param>
            <returns>
                The modified expression list, if any of the elements were modified; otherwise, returns the original expression list.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.VisitAndConvert``1(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
                Visits an expression, casting the result back to the original expression type.
            </summary>
            <typeparam name="T">The type of the expression.</typeparam>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The expression to visit.</param>
            <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
            <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.Visit``1(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``0})">
            <summary>
                Visits all nodes in the collection using a specified element visitor.
            </summary>
            <typeparam name="T">The type of the nodes.</typeparam>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The nodes to visit.</param>
            <param name="elementVisitor">
                A delegate that visits a single element,
                optionally replacing it with a new element.
            </param>
            <returns>
                The modified node list, if any of the elements were modified;
                otherwise, returns the original node list.
            </returns>
        </member>
        <member name="M:System.SharedTypeExtensions.DisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
    </members>
</doc>
