<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prometheus.AspNetCore</name>
    </assembly>
    <members>
        <member name="M:Prometheus.HttpMetricsMiddlewareExtensions.UseHttpMetrics(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Prometheus.HttpMetrics.HttpMiddlewareExporterOptions})">
            <summary>
            Configures the ASP.NET Core request pipeline to collect Prometheus metrics on processed HTTP requests.
            
            Call this after .UseRouting().
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetricsMiddlewareExtensions.UseHttpMetrics(Microsoft.AspNetCore.Builder.IApplicationBuilder,Prometheus.HttpMetrics.HttpMiddlewareExporterOptions)">
            <summary>
            Configures the ASP.NET Core request pipeline to collect Prometheus metrics on processed HTTP requests.
            
            Call this after .UseRouting().
            </summary>
        </member>
        <member name="T:Prometheus.HttpMetrics.CaptureRouteDataMiddleware">
            <summary>
            If routing data is available before executing the inner handler, this routing data is captured
            and can be used later by other middlewares that wish not to be affected by runtime changes to routing data.
            </summary>
            <remarks>
            This is intended to be executed after the .UseRouting() middleware that performs ASP.NET Core 3 endpoint routing.
            
            The captured route data is stored in the context via ICapturedRouteDataFeature.
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpCustomLabel.LabelName">
            <summary>
            Name of the Prometheus label.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpCustomLabel.LabelValueProvider">
            <summary>
            A method that extracts the label value from the HttpContext of the request being handled.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpInProgressOptions.Gauge">
            <summary>
            Set this to use a custom metric instead of the default.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.ReduceStatusCodeCardinality">
            <summary>
            Transforms the <see cref="F:Prometheus.HttpMetrics.HttpRequestLabelNames.Code"/> label value from it's raw value (e.g. 200, 404) into a compressed
            alternative (e.g. 2xx, 4xx). Setting this to true can be used to reduce the cardinality of metrics produced while still clearly communicating
            success and error conditions (client vs server error). Defaults to false.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.AdditionalRouteParameters">
            <summary>
            Additional route parameters to include beyond the defaults (controller/action).
            This may be useful if you have, for example, a "version" parameter for API versioning.
            </summary>
            <remarks>
            Metric labels are automatically defined for these parameters, unless you provide your
            own metric instance in the options (in which case you must add the required labels).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.CustomLabels">
            <summary>
            Additional custom labels to add to the metrics, with values extracted from the HttpContext of incoming requests.
            </summary>
            <remarks>
            Metric labels are automatically defined for these, unless you provide your
            own metric instance in the options (in which case you must add the required labels).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.Registry">
            <summary>
            Allows you to override the registry used to create the default metric instance.
            </summary>
            <remarks>
            Value is ignored if you specify a custom metric instance or metric factory in the options (instance overrides factory overrides registry).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.MetricFactory">
            <summary>
            Allows you to override the metric factory used to create the default metric instance.
            </summary>
            <remarks>
            Value is ignored if you specify a custom metric instance in the options (instance overrides factory overrides registry).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.ExemplarPredicate">
            <summary>
            Enables custom logic to determine whether an exemplar should be recorded for a specific HTTP request.
            This will be called after request processing has completed and the response has been filled by inner handlers.
            </summary>
            <remarks>
            By default, we always record an exemplar (if an exemplar is available for the given request/response pair).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMetricsOptionsBase.IncludePageLabelInDefaultsInternal">
            <summary>
            If set, the "page" label will be considered one of the built-in default labels.
            This is only enabled if Razor Pages is detected at the middleware setup stage.
            
            The value is ignored if a custom metric is provided (though the user may still add
            the "page" label themselves via AdditionalRouteParameters and it will work).
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.CaptureMetricsUrl">
            <summary>
            Whether to capture metrics for queries to the /metrics endpoint (where metrics are exported by default). Defaults to false.
            This matches against URLs starting with the /metrics string specifically - if you use a custom metrics endpoint, this will not match.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.ReduceStatusCodeCardinality">
            <summary>
            Configures all the different types of metrics to use reduced status code cardinality (using 2xx instead of 200, 201 etc).
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.AddRouteParameter(Prometheus.HttpMetrics.HttpRouteParameterMapping)">
            <summary>
            Adds an additional route parameter to all the HTTP metrics.
            
            Helper method to avoid manually adding it to each one.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.AddCustomLabel(Prometheus.HttpMetrics.HttpCustomLabel)">
            <summary>
            Adds a custom label to all the HTTP metrics.
            
            Helper method to avoid manually adding it to each one.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.AddCustomLabel(System.String,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.String})">
            <summary>
            Adds a custom label to all the HTTP metrics.
            
            Helper method to avoid manually adding it to each one.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.SetMetricFactory(Prometheus.IMetricFactory)">
            <summary>
            Configures the middleware to use a custom metric factory for creating the metrics.
            This provides an easy way to add custom static labels and configure exemplar behavior for all created metrics.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpMiddlewareExporterOptions.ConfigureMeasurements(System.Action{Prometheus.HttpMetrics.HttpMetricsOptionsBase})">
            <summary>
            Configures the options that are shared between all metrics exposed by the HTTP server exporter.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRequestCountOptions.Counter">
            <summary>
            Set this to use a custom metric instead of the default.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRequestDurationOptions.Histogram">
            <summary>
            Set this to use a custom metric instead of the default.
            </summary>
        </member>
        <member name="T:Prometheus.HttpMetrics.HttpRequestLabelNames">
            <summary>
            Label names used by the HTTP request handler metrics system.
            </summary>
        </member>
        <member name="T:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2">
            <summary>
            This base class performs the data management necessary to associate the correct labels and values
            with HTTP request metrics, depending on the options the user has provided for the HTTP metric middleware.
            
            The following labels are supported:
            'code' (HTTP status code)
            'method' (HTTP request method)
            'controller' (The Controller used to fulfill the HTTP request)
            'action' (The Action used to fulfill the HTTP request)
            Any other label - from one of:
            * HTTP route parameter (if name/mapping specified in options; name need not match).
            * custom logic (callback decides value for each request)
            
            The 'code' and 'method' data are taken from the current HTTP context.
            'controller', 'action' and route parameter labels will be taken from the request routing information.
            
            If a custom metric is provided in the options, it must not be missing any labels for explicitly defined
            custom route parameters. However, it is permitted to lack any of the default labels (code/method/...).
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.BaselineLabels">
            <summary>
            The set of labels from among the defaults that this metric supports.
            
            This set will be automatically extended with labels for additional
            route parameters and custom labels when creating the default metric instance.
            
            It will also be extended by additional built-in logic (page, endpoint).
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.CreateMetricInstance(System.String[])">
            <summary>
            Creates the default metric instance with the specified set of labels.
            Only used if the caller does not provide a custom metric instance in the options.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.MetricFactory">
            <summary>
            The factory to use for creating the default metric for this middleware.
            Not used if a custom metric is already provided in options.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.CreateChild(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Creates the metric child instance to use for measurements.
            </summary>
            <remarks>
            Internal for testing purposes.
            </remarks>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.CreateDefaultLabelSet">
            <summary>
            Creates the set of labels defined on the automatically created metric.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.CreateAllowedLabelSet">
            <summary>
            Creates the full set of labels ALLOWED for the current metric.
            This may be a greater set than the labels automatically added to the default metric.
            </summary>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.ValidateAdditionalRouteParametersPresentInMetricLabelNames">
            <summary>
            Inspects the metric instance to ensure that all required labels are present.
            </summary>
            <remarks>
            If there are mappings to include route parameters in the labels, there must be labels defined for each such parameter.
            We do this automatically if we use the default metric instance but if a custom one is provided, this must be done by the caller.
            </remarks>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.ValidateCustomLabelsPresentInMetricLabelNames">
            <summary>
            Inspects the metric instance to ensure that all required labels are present.
            </summary>
            <remarks>
            If there are mappings to include custom labels, there must be label names defined for each such parameter.
            We do this automatically if we use the default metric instance but if a custom one is provided, this must be done by the caller.
            </remarks>
        </member>
        <member name="M:Prometheus.HttpMetrics.HttpRequestMiddlewareBase`2.ValidateNoUnexpectedLabelNames">
            <summary>
            If we use a custom metric, it should not have labels that are neither defaults nor additional route parameters.
            </summary>
        </member>
        <member name="T:Prometheus.HttpMetrics.HttpRouteParameterMapping">
            <summary>
            Maps an HTTP route parameter name to a Prometheus label name.
            </summary>
            <remarks>
            Typically, the parameter name and the label name will be equal.
            The purpose of this is to enable capture of route parameters that conflict with built-in label names like "method" (HTTP method).
            </remarks>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRouteParameterMapping.ParameterName">
            <summary>
            Name of the HTTP route parameter.
            </summary>
        </member>
        <member name="P:Prometheus.HttpMetrics.HttpRouteParameterMapping.LabelName">
            <summary>
            Name of the Prometheus label.
            </summary>
        </member>
        <member name="T:Prometheus.KestrelMetricServer">
            <summary>
            A stand-alone Kestrel based metric server that saves you the effort of setting up the ASP.NET Core pipeline.
            For all practical purposes, this is just a regular ASP.NET Core server that only serves Prometheus requests.
            </summary>
        </member>
        <member name="P:Prometheus.KestrelMetricServerOptions.Hostname">
            <summary>
            Will listen for requests using this hostname. "+" indicates listen on all hostnames.
            By setting this to "localhost", you can easily prevent access from remote systems.-
            </summary>
        </member>
        <member name="P:Prometheus.KestrelMetricServerOptions.ConfigureExporter">
            <summary>
            Allows metric exporter options to be configured in a flexible manner.
            The callback is called after applying any values in KestrelMetricServerOptions.
            </summary>
        </member>
        <member name="T:Prometheus.MetricServerMiddleware">
            <summary>
            Prometheus metrics export middleware for ASP.NET Core.
            
            You should use IApplicationBuilder.UseMetricServer extension method instead of using this class directly.
            </summary>
        </member>
        <member name="P:Prometheus.MetricServerMiddleware.Settings.Registry">
            <summary>
            Where do we take the metrics from. By default, we will take them from the global singleton registry.
            </summary>
        </member>
        <member name="P:Prometheus.MetricServerMiddleware.Settings.EnableOpenMetrics">
            <summary>
            Whether we support the OpenMetrics exposition format. Required to publish exemplars. Defaults to enabled.
            Use of OpenMetrics also requires that the client negotiate the OpenMetrics format via the HTTP "Accept" request header.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.MapMetrics(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Action{Prometheus.MetricServerMiddleware.Settings},System.String)">
            <summary>
            Starts a Prometheus metrics exporter using endpoint routing.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.UseMetricServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Int32,System.Action{Prometheus.MetricServerMiddleware.Settings},System.String)">
            <summary>
            Starts a Prometheus metrics exporter, filtering to only handle requests received on a specific port.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.UseMetricServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Prometheus.MetricServerMiddleware.Settings},System.String)">
            <summary>
            Starts a Prometheus metrics exporter.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.MapMetrics(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Prometheus.CollectorRegistry)">
            <summary>
            Starts a Prometheus metrics exporter using endpoint routing.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.UseMetricServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Int32,System.String,Prometheus.CollectorRegistry)">
            <summary>
            Starts a Prometheus metrics exporter, filtering to only handle requests received on a specific port.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
        <member name="M:Prometheus.MetricServerMiddlewareExtensions.UseMetricServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,Prometheus.CollectorRegistry)">
            <summary>
            Starts a Prometheus metrics exporter.
            The default URL is /metrics, which is a Prometheus convention.
            Use static methods on the <see cref="T:Prometheus.Metrics"/> class to create your metrics.
            </summary>
        </member>
    </members>
</doc>
