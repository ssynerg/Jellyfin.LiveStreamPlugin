<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaBrainz.MusicBrainz</name>
    </assembly>
    <members>
        <member name="T:MetaBrainz.MusicBrainz.AuthorizationScope">
            <summary>Enumeration of the scopes available through MusicBrainz OAuth2 authentication.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.None">
            <summary>No authorization requested.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Everything">
            <summary>Request all available permissions (not recommended).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Profile">
            <summary>View the user's public profile information (e.g. username and time zone).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Email">
            <summary>View the user's email address.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Tag">
            <summary>View and modify the user's private tags.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Rating">
            <summary>View and modify the user's private ratings.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.Collection">
            <summary>View and modify the user's private collections.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.SubmitIsrc">
            <summary>Submit new ISRCs to the database.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.AuthorizationScope.SubmitBarcode">
            <summary>Submit barcodes to the database.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.EntityType">
            <summary>A MusicBrainz entity type.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Unknown">
            <summary>An unknown entity.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Area">
            <summary>An area (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Artist">
            <summary>An artist (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Collection">
            <summary>A collection (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Event">
            <summary>An event (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Genre">
            <summary>A genre (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IGenre"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Instrument">
            <summary>An instrument (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Label">
            <summary>A label (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Place">
            <summary>A place (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Recording">
            <summary>A recording (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Release">
            <summary>A release (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.ReleaseGroup">
            <summary>A release group (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Series">
            <summary>A series (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Url">
            <summary>A URL (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IUrl"/>).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.EntityType.Work">
            <summary>A work (i.e. an object implementing <see cref="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork"/>).</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Include">
            <summary>Enumeration of additional information that can be requested to be included in query results.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.None">
            <summary>No extra information requested.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Artists">
            <summary>Include information about directly-linked artists.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Collections">
            <summary>Include information about directly-linked collections.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Labels">
            <summary>Include information about directly-linked labels.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Recordings">
            <summary>Include information about directly-linked recordings.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ReleaseGroups">
            <summary>Include information about directly-linked release groups.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Releases">
            <summary>Include information about directly-linked releases.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Works">
            <summary>Include information about directly-linked works.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ArtistCredits">
            <summary>Include artist credits for all releases and recordings.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.DiscIds">
            <summary>Include Disc IDs for all media in the release.</summary>
            <remarks>Only valid on queries for releases; implies <see cref="F:MetaBrainz.MusicBrainz.Include.Media"/>.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Isrcs">
            <summary>Include ISRC values for all recordings.</summary>
            <remarks>Only valid in combination with <see cref="F:MetaBrainz.MusicBrainz.Include.Recordings"/>.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Media">
            <summary>Include information about media for all releases (track count and format).</summary>
            <remarks>Only valid on queries for releases; implied by either <see cref="F:MetaBrainz.MusicBrainz.Include.DiscIds"/> or <see cref="F:MetaBrainz.MusicBrainz.Include.Recordings"/>.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.UserCollections">
            <summary>Include private collections of the authenticated user.</summary>
            <remarks>Requires authentication. Applies only to queries for collections.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.VariousArtists">
            <summary>Only include releases where the artist is credited on one or more tracks, but not on the release itself.</summary>
            <remarks>Only valid on artist queries, and only in combination with <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Aliases">
            <summary>Include aliases.</summary>
            <remarks>Aliases are not ordered, and only valid on queries for areas, artists, labels or works.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Annotation">
            <summary>Include the annotation.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Ratings">
            <summary>Include ratings.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Tags">
            <summary>Include tags.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.UserRatings">
            <summary>Like <see cref="F:MetaBrainz.MusicBrainz.Include.Ratings"/>, but only returns the rating(s) set by the authenticated user.</summary>
            <remarks>Requires authentication.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.UserTags">
            <summary>Like <see cref="F:MetaBrainz.MusicBrainz.Include.Tags"/>, but only returns the tag(s) set by the authenticated user.</summary>
            <remarks>Requires authentication.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.Genres">
            <summary>Include genres (i.e. tags from the genre list).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.UserGenres">
            <summary>Like <see cref="F:MetaBrainz.MusicBrainz.Include.Genres"/>, but only returns the genre(s) set by the authenticated user.</summary>
            <remarks>Requires authentication.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.AreaRelationships">
            <summary>Include information about relationships with areas.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ArtistRelationships">
            <summary>Include information about relationships with artists.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.EventRelationships">
            <summary>Include relationships with events.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.InstrumentRelationships">
            <summary>Include relationships with instruments.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.LabelRelationships">
            <summary>Include information about relationships with labels.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.PlaceRelationships">
            <summary>Include information about relationships with places.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.RecordingLevelRelationships">
            <summary>Include information about relationships involving the recordings on the release.</summary>
            <remarks>
            Only valid on queries for releases. Will have no real effect unless information about the release's recordings (via
            <see cref="F:MetaBrainz.MusicBrainz.Include.Recordings"/>) and one or more relationships (via <see cref="F:MetaBrainz.MusicBrainz.Include.ArtistRelationships"/>,
            <see cref="F:MetaBrainz.MusicBrainz.Include.WorkRelationships"/>, ...) is being requested at the same time.
            </remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.RecordingRelationships">
            <summary>Include relationships with recordings.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ReleaseGroupRelationships">
            <summary>Include information about relationships with release groups.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ReleaseRelationships">
            <summary>Include information about relationships with releases.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.SeriesRelationships">
            <summary>Include information about relationships with releases.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.UrlRelationships">
            <summary>Include information about relationships with URLs.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.WorkLevelRelationships">
            <summary>Include information about relationships involving the works associated with the recordings.</summary>
            <remarks>
            Only valid on queries for releases or recordings. Will have no real effect unless information about related works
            (<see cref="F:MetaBrainz.MusicBrainz.Include.WorkRelationships"/>) and one or more relationships (<see cref="F:MetaBrainz.MusicBrainz.Include.ArtistRelationships"/>, ...) is being requested at
            the same time.
            </remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.WorkRelationships">
            <summary>Include information about relationships with works.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Include.ReleaseGroupLevelRelationships">
            <summary>Include information about relationships involving the release groups associated with the release.</summary>
            <remarks>
            Only valid on queries for releases. Will have no real effect unless information about related release groups (via
            <see cref="F:MetaBrainz.MusicBrainz.Include.ReleaseGroups"/>) and one or more relationships (via <see cref="F:MetaBrainz.MusicBrainz.Include.ArtistRelationships"/>,
            <see cref="F:MetaBrainz.MusicBrainz.Include.WorkRelationships"/>, ...) is being requested at the same time.
            </remarks>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Browses.IBrowseResults`1">
            <summary>The result of a browse request for a specific entity type.</summary>
            <typeparam name="T">The type of entity being browsed.</typeparam>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias">
            <summary>An alias for an entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Begin">
            <summary>The date at which the alias became applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.End">
            <summary>The date at which the alias ceased to be applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Ended">
            <summary>A flag indicating whether or not the alias has ceased to be applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Locale">
            <summary>The specific locale where the alias applies.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Name">
            <summary>The alias.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Primary">
            <summary>
            Flag indicating whether or not this is the primary alias within the locale specified by <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Locale"/>.
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.SortName">
            <summary>The sort name form of the alias, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.Type">
            <summary>The type of the alias, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAlias.TypeId">
            <summary>The type of the alias, expressed as an MBID.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IAliasedEntity">
            <summary>An entity with aliases.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAliasedEntity.Aliases">
            <summary>The aliases for this entity.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotatedEntity">
            <summary>An entity that can have an associated annotation.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotatedEntity.Annotation">
            <summary>The annotation for this entity.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotation">
            <summary>An annotation on a MusicBrainz entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotation.Entity">
            <summary>The MBID of the entity the annotation is attached to.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotation.Type">
            <summary>The type of entity the annotation is attached to.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotation.Name">
            <summary>The name of the entity the annotation is attached to.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IAnnotation.Text">
            <summary>The annotation's text.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea">
            <summary>A MusicBrainz area.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea.Iso31661Codes">
            <summary>The ISO 3166-1 codes associated with this area, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea.Iso31662Codes">
            <summary>The ISO 3166-2 codes associated with this area, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea.Iso31663Codes">
            <summary>The ISO 3166-3 codes associated with this area, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea.LifeSpan">
            <summary>The area's lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArea.SortName">
            <summary>The area's sort name, if any.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist">
            <summary>A MusicBrainz artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Area">
            <summary>The main area associated with the artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.BeginArea">
            <summary>The starting area for the artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Country">
            <summary>The ISO 3166-1 code for the (primary) country associated with the artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.EndArea">
            <summary>The ending area for the artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Gender">
            <summary>The artist's gender.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.GenderId">
            <summary>The artist's gender, expressed as an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Ipis">
            <summary>The IPI (Interested Parties Information) codes associated with this artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Isnis">
            <summary>The ISNI (International Standard Name Identifier, ISO 27729) codes associated with this artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.LifeSpan">
            <summary>The artist's lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Recordings">
            <summary>The labels associated with the artist, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.ReleaseGroups">
            <summary>The release groups associated with the artist, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Releases">
            <summary>The releases associated with the artist, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.SortName">
            <summary>The artist's sort name.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist.Works">
            <summary>The works associated with the artist, if any.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub">
            <summary>A CD stub (information entered about a CD by someone without a MusicBrainz account).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Artist">
            <summary>The name of the artist for the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Barcode">
            <summary>The barcode for the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Disambiguation">
            <summary>The disambiguation comment for the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Id">
            <summary>The Musicbrainz disc ID for the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Title">
            <summary>The title for the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.TrackCount">
            <summary>The number of tracks on the CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICdStub.Tracks">
            <summary>The track list for the CD.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection">
            <summary>A collection of MusicBrainz entities.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection.Editor">
            <summary>The name of the editor who created the collection.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection.ContentType">
            <summary>The type of entity stored in the collection.</summary>
            <remarks>
            If this is set to <see cref="F:MetaBrainz.MusicBrainz.EntityType.Unknown"/>, the actual entity type string will be stored in
            <see cref="P:MetaBrainz.Common.Json.IJsonBasedObject.UnhandledProperties"/> with key "entity-type".
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection.ItemCount">
            <summary>The number of items in the collection.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection.Name">
            <summary>The name of the collection.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoordinates">
            <summary>A set of coordinates.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoordinates.Latitude">
            <summary>The latitude component of the coordinates.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoordinates.Longitude">
            <summary>The longitude component of the coordinates.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive">
            <summary>Information about available CoverArt Archive items.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive.Artwork">
            <summary>Flag indicating that artwork is available.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive.Back">
            <summary>Flag indicating that a back cover image is available.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive.Count">
            <summary>The number of items available.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive.Darkened">
            <summary>
            Flag indicating that the CoverArt Archive has received a take-down request for this release (preventing further uploads).
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ICoverArtArchive.Front">
            <summary>Flag indicating that a front cover image is available.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IDisc">
            <summary>A compact disc.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IDisc.Id">
            <summary>The MusicBrainz disc ID for this disc.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IDisc.Offsets">
            <summary>The offsets (Red Book sector addresses) for this disc.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IDisc.Releases">
            <summary>The releases that include this disc.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IDisc.Sectors">
            <summary>The total size of this disc, in Red Book sectors.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IEntity">
            <summary>An MusicBrainz entity, identified by an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEntity.EntityType">
            <summary>The type of this entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEntity.Id">
            <summary>The MBID that identifies this entity.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent">
            <summary>A MusicBrainz event.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent.Cancelled">
            <summary>A flag indicating whether or not the event was cancelled.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent.LifeSpan">
            <summary>The event's lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent.Setlist">
            <summary>The setlist for the event.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent.Time">
            <summary>The starting time for the event, in HH:MM format.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IGenre">
            <summary>A MusicBrainz genre.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IGenre.VoteCount">
            <summary>The number of votes that have been registered for this genre, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument">
            <summary>A MusicBrainz instrument.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument.Description">
            <summary>The instrument's description.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IIsrc">
            <summary>Information associated with an ISRC (International Standard Recording Code).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IIsrc.Recordings">
            <summary>The recordings that have this ISRC assigned to them.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IIsrc.Value">
            <summary>The ISRC value.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel">
            <summary>A MusicBrainz label.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.Area">
            <summary>The main area associated with the label.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.Country">
            <summary>The ISO 3166-1 code for the (primary) country associated with the label.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.Ipis">
            <summary>The IPI (Interested Parties Information) codes associated with this label.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.Isnis">
            <summary>The ISNI (International Standard Name Identifier, ISO 27729) codes associated with this label.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.LabelCode">
            <summary>The label code for this label (as in &quot;LC-<em>nnnn</em>&quot;).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.LifeSpan">
            <summary>The label's lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.Releases">
            <summary>The releases associated with the label, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel.SortName">
            <summary>The label's sort name.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabelInfo">
            <summary>Label information for a release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabelInfo.CatalogNumber">
            <summary>The catalog number (specific to <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabelInfo.Label"/>) associated with the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILabelInfo.Label">
            <summary>The label associated with the release.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ILifeSpan">
            <summary>The lifespan of an entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILifeSpan.Begin">
            <summary>The starting date of the lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILifeSpan.End">
            <summary>The ending date of the lifespan.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ILifeSpan.Ended">
            <summary>Flag indicating whether or not the lifespan has ended.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium">
            <summary>A medium associated with a release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.DataTracks">
            <summary>The data tracks on the medium, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Discs">
            <summary>The physical discs associated with the medium, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Format">
            <summary>The medium's format, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.FormatId">
            <summary>The medium's format, expressed as an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Position">
            <summary>The position of the medium in its release's medium list.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Pregap">
            <summary>The pre-gap track on the medium, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Title">
            <summary>The medium's title.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.TrackCount">
            <summary>The number of tracks on the medium.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.TrackOffset">
            <summary>The first track present in <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Tracks"/>, if not all tracks were loaded by this request.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IMedium.Tracks">
            <summary>The normal (audio) tracks on the medium, if any.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.INameCredit">
            <summary>A named credit for an artist.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.INameCredit.Artist">
            <summary>The artist being credited.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.INameCredit.JoinPhrase">
            <summary>The join phrase used to combine this credit with subsequent ones.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.INameCredit.Name">
            <summary>The name under which the artist is credited.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.INamedEntity">
            <summary>An entity with a name.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.INamedEntity.Disambiguation">
            <summary>The text used to distinguish this entity from others with the same name.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.INamedEntity.Name">
            <summary>The entity's name.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace">
            <summary>A MusicBrainz place.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace.Address">
            <summary>The address for the place.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace.Area">
            <summary>The area where the place is located.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace.Coordinates">
            <summary>The coordinates for the place.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace.LifeSpan">
            <summary>The place's lifespan.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRatableEntity">
            <summary>A entity that can be rated.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRatableEntity.Rating">
            <summary>The rating for the entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRatableEntity.UserRating">
            <summary>The rating given to the entity by the authenticated user.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRating">
            <summary>Information about an entity's rating.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRating.Value">
            <summary>The rating value, if any, expressed as a fractional number of stars (0-5).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRating.VoteCount">
            <summary>The number of ratings submitted for the entity, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording">
            <summary>A MusicBrainz recording.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.ArtistCredit">
            <summary>The artist credit for the recording.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.FirstReleaseDate">
            <summary>The earliest date of release for this recording.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.Isrcs">
            <summary>The ISRC (International Standard Recording Code) values associated with this release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.Length">
            <summary>The length of the recording.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.Releases">
            <summary>The releases that include the recording.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording.Video">
            <summary>Flag indicating whether or not this recording includes visual content.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelatableEntity">
            <summary>A MusicBrainz entity that can be related to other MusicBrainz entities.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelatableEntity.Relationships">
            <summary>The relationships associated with this entity.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship">
            <summary>A relationship between two MusicBrainz entities.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Area">
            <summary>The target area of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Artist">
            <summary>The target artist of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Attributes">
            <summary>
            The attributes attached to the relationship (if any).
            These values may be keys into <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.AttributeCredits"/> and/or <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.AttributeValues"/>.
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.AttributeCredits">
            <summary>The credits attached to specific attributes of the relationship (if any).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.AttributeIds">
            <summary>The MBIDs linked to specific attributes of the relationship (if any).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.AttributeValues">
            <summary>The values attached to specific attributes of the relationship (if any).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Begin">
            <summary>The date the relationship began.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Direction">
            <summary>The direction of the relationship (forward/backward).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.End">
            <summary>The date the relationship ended.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Ended">
            <summary>Flag indicating whether or not the relationship has ended.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Event">
            <summary>The target event of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Instrument">
            <summary>The target instrument of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Label">
            <summary>The target label of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.OrderingKey">
            <summary>An optional ordering key for the relationships.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Place">
            <summary>The target place of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Recording">
            <summary>The target recording of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Release">
            <summary>The target release of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.ReleaseGroup">
            <summary>The target release group of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Series">
            <summary>The target series of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.SourceCredit">
            <summary>An optional alternate name for the source of the relationship.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Target">
            <summary>
            The target of the relationship. Will be <see langword="null"/> unless <see cref="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.TargetType"/> is set to known entity type.
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.TargetCredit">
            <summary>An optional alternate name for the target of the relationship.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.TargetId">
            <summary>The MBID of the target of the relationship, if provided.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.TargetType">
            <summary>The type of entity targeted by the relationship, if provided.</summary>
            <remarks>
            If this is set to <see cref="F:MetaBrainz.MusicBrainz.EntityType.Unknown"/>, the actual entity type string will be stored in
            <see cref="P:MetaBrainz.Common.Json.IJsonBasedObject.UnhandledProperties"/> with key "target-type".
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Type">
            <summary>The relationship type.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.TypeId">
            <summary>The MBID for the relationship type, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Url">
            <summary>The target URL of the relationship, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelationship.Work">
            <summary>The target work of the relationship, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease">
            <summary>A MusicBrainz release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.ArtistCredit">
            <summary>The artist credit for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Asin">
            <summary>The Amazon Standard Identification Number (ASIN) associated with the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Barcode">
            <summary>The "barcode" (i.e. the UPC or EAN) associated with the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Collections">
            <summary>The collections containing the release, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Country">
            <summary>The ISO 3166-1 code for the (primary) country associated with the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.CoverArtArchive">
            <summary>Information about any covert art in the Cover Art Archive (CAA) for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Date">
            <summary>The earliest release date for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.LabelInfo">
            <summary>The label information for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Media">
            <summary>The media comprising the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Packaging">
            <summary>The packaging for the release, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.PackagingId">
            <summary>The packaging for the release, expressed as an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Quality">
            <summary>The data quality for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.ReleaseEvents">
            <summary>The release events for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.ReleaseGroup">
            <summary>The release group the release belongs to.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.Status">
            <summary>The status of the release, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.StatusId">
            <summary>The status of the release, expressed as an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease.TextRepresentation">
            <summary>The representation of text on the release.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseEvent">
            <summary>A release event.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseEvent.Area">
            <summary>The area where the release event took place.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseEvent.Date">
            <summary>The date the release event took place.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup">
            <summary>A MusicBrainz release group.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.ArtistCredit">
            <summary>The artist credit for the release group.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.FirstReleaseDate">
            <summary>The earliest date of release for the releases in the group.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.PrimaryType">
            <summary>The primary type of the release group, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.PrimaryTypeId">
            <summary>The primary type of the release group, expressed as an MBID.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.Releases">
            <summary>The releases associated with the release group.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.SecondaryTypes">
            <summary>The secondary types of the release group (if any), expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup.SecondaryTypeIds">
            <summary>The secondary types of the release group (if any), expressed as MBIDs.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries">
            <summary>A MusicBrainz series.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ISimpleTrack">
            <summary>Simple information about a track on a CD.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ISimpleTrack.Artist">
            <summary>The artist for the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ISimpleTrack.Length">
            <summary>The length for the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ISimpleTrack.Title">
            <summary>The title for the track.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITag">
            <summary>A tag attached to an entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITag.Name">
            <summary>The name of the tag.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITag.VoteCount">
            <summary>The number of votes that have been registered for this tag, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity">
            <summary>A entity that can have tags applied to it.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity.Genres">
            <summary>The genres associated with this entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity.Tags">
            <summary>The tags associated with this entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity.UserGenres">
            <summary>The genres set on this entity by the authenticated user.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity.UserTags">
            <summary>The tags set on this entity by the authenticated user.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITextRepresentation">
            <summary>Information about the representation of text on a release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITextRepresentation.Language">
            <summary>The ISO 363-2 language code for the release, if set.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITextRepresentation.Script">
            <summary>The ISO 15924 script code for the release, if set.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITitledEntity">
            <summary>An entity with a title.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITitledEntity.Disambiguation">
            <summary>The text used to distinguish this entity from others with the same title.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITitledEntity.Title">
            <summary>The entity's title.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack">
            <summary>A track on a medium.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.ArtistCredit">
            <summary>The artist credit for the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Id">
            <summary>The MBID for the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Length">
            <summary>The length of the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Number">
            <summary>The number of the track on its medium.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Position">
            <summary>The position of the track within its medium.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Recording">
            <summary>The recording associated with the track.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack.Title">
            <summary>The track title.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.ITypedEntity">
            <summary>A typed MusicBrainz entity.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITypedEntity.Type">
            <summary>The type of the entity, if applicable, expressed as text.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.ITypedEntity.TypeId">
            <summary>The type of the entity, if applicable, expressed as an MBID.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IUrl">
            <summary>A MusicBrainz URL.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IUrl.Resource">
            <summary>The resource location for the URL.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork">
            <summary>A MusicBrainz work.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork.Attributes">
            <summary>The attributes attached to this work (if any).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork.Iswcs">
            <summary>The ISWCs (International Standard Musical Work Codes) attached to this work (if any).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork.Language">
            <summary>The (main) ISO 639-2 language code for the lyrics of this work, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWork.Languages">
            <summary>The ISO 639-2 language codes for the lyrics of this work, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Entities.IWorkAttribute">
            <summary>An attribute for a work.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWorkAttribute.Type">
            <summary>The type of the attribute.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWorkAttribute.TypeId">
            <summary>The MBID for the attribute type, if applicable.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWorkAttribute.Value">
            <summary>The value for the attribute.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Entities.IWorkAttribute.ValueId">
            <summary>The MBID for the value, if applicable.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.IAuthorizationToken">
            <summary>An OAuth2 authorization token.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IAuthorizationToken.AccessToken">
            <summary>The access token (i.e. the one you use for authenticated requests).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IAuthorizationToken.Lifetime">
            <summary>The lifetime of the token, in seconds (typically one hour).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IAuthorizationToken.RefreshToken">
            <summary>The refresh token (i.e. the one you use to get a new access token).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IAuthorizationToken.TokenType">
            <summary>The type of this authorization token.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.IDiscIdLookupResult">
            <summary>
            The result of a lookup for a MusicBrainz disc ID: a disc or cd stub for direct ID matches, or a release list for a fuzzy lookup.
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IDiscIdLookupResult.Disc">
            <summary>The disc returned by the lookup (if any was found).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IDiscIdLookupResult.Releases">
            <summary>The list of matching releases, if a fuzzy TOC lookup was done.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IDiscIdLookupResult.Stub">
            <summary>The CD stub returned by the lookup (if any was found).</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2">
            <summary>The results for a query that supports paging (i.e. search or browse), returned one page at a time.</summary>
            <typeparam name="TResults">The specific type of query results.</typeparam>
            <typeparam name="TItem">The type of item being returned.</typeparam>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.AsStream">
            <summary>Gets the streaming form of this set of query results.</summary>
            <returns>
            The streaming form of this set of query results, suitable for enumeration (e.g. by <c>foreach</c> or <c>await foreach</c>).
            </returns>
            <remarks>
            Enumerating the return value is equivalent to enumerating this result set and then calling <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Next"/> or
            <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.NextAsync(System.Threading.CancellationToken)"/> and processing those results, and so on until there are no more results to process.<br/>
            Operating on this set of paged results while the streaming form is in use is not recommended, because it will interfere with
            the streaming enumeration.
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.IsActive">
            <summary>Indicates whether or not these results are active (i.e. at least one request has been issued for them).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Limit">
            <summary>
            The maximum number of results to be returned from a single web request (i.e. the maximum number of elements in
            <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Results"/>).<br/>
            Valid range is 1-100; if not specifically set, the server's default (normally 25) is used.
            </summary>
            <remarks>
            Setting this only affects further web requests made via calls to <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Next"/> and/or <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Previous"/>.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Next">
            <summary>
            Queries the MusicBrainz server (using the same <see cref="T:MetaBrainz.MusicBrainz.Query"/> object used for the original request) for the next set
            of results, based on <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Offset"/> and <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Limit"/>.
            </summary>
            <returns>This result set (with updated values).</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.NextAsync(System.Threading.CancellationToken)">
            <summary>
            Queries the MusicBrainz server (using the same <see cref="T:MetaBrainz.MusicBrainz.Query"/> object used for the original request) for the next set
            of results, based on <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Offset"/> and <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Limit"/>.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>This result set (with updated values).</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.NextOffset">
            <summary>
            The offset to use for the next request (via <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Next"/> and/or <see cref="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Previous"/>), or <see langword="null"/>
            to continue where the current results end.
            </summary>
            <remarks>
            This is reset to <see langword="null"/> when a request is made, so when set to a specific value, that value is only used once.
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Offset">
            <summary>The starting offset within the total set of matches for the current result set.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Previous">
            <summary>
            Queries the MusicBrainz server (using the same <see cref="T:MetaBrainz.MusicBrainz.Query"/> object used for the original request) for the previous set
            of results, based on <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Offset"/> and <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Limit"/>.
            </summary>
            <returns>This result set (with updated values).</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.PreviousAsync(System.Threading.CancellationToken)">
            <summary>
            Queries the MusicBrainz server (using the same <see cref="T:MetaBrainz.MusicBrainz.Query"/> object used for the original request) for the previous set
            of results, based on <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Offset"/> and <see cref="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Limit"/>.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>This result set (with updated values).</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.Results">
            <summary>The current results.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IPagedQueryResults`2.TotalResults">
            <summary>The total number of matches.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.IStreamingQueryResults`1">
            <summary>
            The results for a query that supports paging (i.e. search or browse), returned as a stream of results that can be enumerated
            synchronously or asynchronously.
            </summary>
            <typeparam name="TItem">The type of item being returned.</typeparam>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.IUserInfo">
            <summary>
            Information about a user as returned by OAuth2 (if <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Profile"/> has been granted).
            </summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.Email">
            <summary>The user's email address. Will only be provided if <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Email"/> has been granted.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.Gender">
            <summary>The user's gender.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.Name">
            <summary>The user's name.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.Profile">
            <summary>The user's MusicBrainz profile page.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.TimeZone">
            <summary>The user's time zone.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.UserId">
            <summary>The user's internal MetaBrainz user id.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.VerifiedEmail">
            <summary>Indicates whether the user's email address is verified.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.IUserInfo.Website">
            <summary>The user's website.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResult">
            <summary>A result returned by a search request.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResult.Score">
            <summary>The score (0-100) indicating how well the item matches the search request.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResult`1">
            <summary>A result returned by a search request.</summary>
            <typeparam name="T">The type of item returned.</typeparam>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResult`1.Item">
            <summary>The result item.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResults`1">
            <summary>The result of a search request for a specific entity type.</summary>
            <typeparam name="T">The type of entity that was searched for.</typeparam>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Interfaces.Searches.ISearchResults`1.Created">
            <summary>The date and time at which this search result was created, if available.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.OAuth2">
            <summary>Class providing convenient access to MusicBrainz' OAuth2 service.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.AuthorizationEndPoint">
            <summary>The endpoint used when requesting authorization.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.DefaultClientId">
            <summary>The default client ID to use for requests.</summary>
            <remarks>
            To register an application and obtain a client ID, go to
            <a href="https://musicbrainz.org/account/applications">your MusicBrainz account</a>.
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.DefaultPort">
            <summary>The default port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.DefaultServer">
            <summary>The default server to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.DefaultUrlScheme">
            <summary>The default URL scheme (internet access protocol) to use for requests.</summary>
            <remarks>For the official MusicBrainz site, this <em>must</em> be <c>https</c>.</remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.OutOfBandUri">
            <summary>The URI to use for out-of-band authorization.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.RevokeEndPoint">
            <summary>The endpoint used when revoking a token.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.TokenEndPoint">
            <summary>The endpoint used when creating or refreshing a token.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.TokenRequestBodyType">
            <summary>The content type for a token request body.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.TraceSource">
            <summary>The trace source (named 'MetaBrainz.MusicBrainz.OAuth2') used by this class.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.OAuth2.UserInfoEndPoint">
            <summary>The endpoint used when requesting user info.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.#ctor">
            <summary>
            Initializes a new OAuth2 client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.OAuth2.Close"/> method.
            </summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>Initializes a new OAuth2 client instance using a specific HTTP client.</summary>
            <param name="client">The HTTP client to use.</param>
            <param name="takeOwnership">
            Indicates whether this OAuth2 client should take ownership of <paramref name="client"/>.<br/>
            If this is <see langword="false"/>, it remains owned by the caller; this means <see cref="M:MetaBrainz.MusicBrainz.OAuth2.Close"/> will throw an exception
            and <see cref="M:MetaBrainz.MusicBrainz.OAuth2.Dispose"/> will release the reference to <paramref name="client"/> without disposing it.<br/>
            If this is <see langword="true"/>, then this object takes ownership and treat it just like an HTTP client it created itself;
            this means <see cref="M:MetaBrainz.MusicBrainz.OAuth2.Close"/> will dispose of it (with further requests creating a new HTTP client) and
            <see cref="M:MetaBrainz.MusicBrainz.OAuth2.Dispose"/> will dispose the HTTP client too.
            </param>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.ClientId">
            <summary>The client ID to use for requests.</summary>
            <remarks>
            To register an application and obtain a client ID, go to
            <a href="https://musicbrainz.org/account/applications">your MusicBrainz account</a>.
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.Port">
            <summary>The port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.Server">
            <summary>The web site to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.OAuth2.UrlScheme">
            <summary>The URL scheme (internet access protocol) to use for requests.</summary>
            <remarks>For the official MusicBrainz site, this <em>must</em> be <c>https</c>.</remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.CreateAuthorizationRequest(System.Uri,MetaBrainz.MusicBrainz.AuthorizationScope,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the URI to use to request an authorization code.</summary>
            <param name="redirectUri">
            The URI that should receive the authorization code; use <see cref="F:MetaBrainz.MusicBrainz.OAuth2.OutOfBandUri"/> for out-of-band requests.
            </param>
            <param name="scope">The authorization scopes that should be included in the authorization code.</param>
            <param name="state">
            Any string the application wants passed back after authorization; it will be included in the request sent to
            <paramref name="redirectUri"/>. For example, this can be a CSRF token from your application. This parameter is optional, but
            strongly recommended.
            </param>
            <param name="challenge">
            MusicBrainz supports the use of "Proof Key for Code Exchange" (PKCE) by clients. This is strongly recommended to avoid
            authorization code interception attacks.<br/>
            See <seealso href="https://tools.ietf.org/html/rfc7636#section-4.1">RFC 7636</seealso> for the process of generating a
            <c>code_verifier</c> and then a <c>code_challenge</c> (passed here) based on that.
            </param>
            <param name="challengeMethod">Either "S256" (recommended) or "plain" (the default if not specified).</param>
            <param name="offlineAccess">Requests offline use (a refresh token will be provided alongside the access token).</param>
            <param name="forcePrompt">
            If <see langword="true"/>, the user will be required to confirm authorization even if the requested scopes have already been
            granted.
            </param>
            <returns>The generated URI.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.GetBearerToken(System.String,System.String,System.Uri,System.String)">
            <summary>Exchanges an authorization code for a bearer token.</summary>
            <param name="code">The authorization code to be used. If the request succeeds, this code will be invalidated.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
            <param name="redirectUri">
            The URI to redirect to (or <see cref="F:MetaBrainz.MusicBrainz.OAuth2.OutOfBandUri"/> for out-of-band requests); must match the request URI used to obtain
            <paramref name="code"/>.
            </param>
            <param name="verifier">
            If you're using PKCE, pass the <c>code_verifier</c> here. The request will be rejected if it doesn't agree with the challenge
            and challenge method used for the authorization request as generated via <see cref="M:MetaBrainz.MusicBrainz.OAuth2.CreateAuthorizationRequest(System.Uri,MetaBrainz.MusicBrainz.AuthorizationScope,System.String,System.String,System.String,System.Boolean,System.Boolean)"/>. The process
            is described in detail by <seealso href="https://tools.ietf.org/html/rfc7636#section-4.5">RFC 7636</seealso>.
            </param>
            <returns>The obtained bearer token.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.GetBearerTokenAsync(System.String,System.String,System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>Exchanges an authorization code for a bearer token.</summary>
            <param name="code">The authorization code to be used. If the request succeeds, this code will be invalidated.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
            <param name="redirectUri">
            The URI to redirect to (or <see cref="F:MetaBrainz.MusicBrainz.OAuth2.OutOfBandUri"/> for out-of-band requests); must match the request URI used to obtain
            <paramref name="code"/>.
            </param>
            <param name="verifier">
            If you're using PKCE, pass the <c>code_verifier</c> here. The request will be rejected if it doesn't agree with the challenge
            and challenge method used for the authorization request as generated via <see cref="M:MetaBrainz.MusicBrainz.OAuth2.CreateAuthorizationRequest(System.Uri,MetaBrainz.MusicBrainz.AuthorizationScope,System.String,System.String,System.String,System.Boolean,System.Boolean)"/>. The process
            is described in detail by <seealso href="https://tools.ietf.org/html/rfc7636#section-4.5">RFC 7636</seealso>.
            </param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The obtained bearer token.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.GetUserInfo(System.String)">
            <summary>Gets information about the user associated with an access token.</summary>
            <param name="token">The access token.</param>
            <returns>Information about the user associated with the access token.</returns>
            <remarks>
            If the <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Profile"/> permission has not been granted, this request will fail. In addition, it will
            only include the user's email address if the <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Email"/> permission has been granted.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.GetUserInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>Gets information about the user associated with an access token.</summary>
            <param name="token">The access token.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>Information about the user associated with the access token.</returns>
            <remarks>
            If the <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Profile"/> permission has not been granted, this request will fail. In addition, it will
            only include the user's email address if the <see cref="F:MetaBrainz.MusicBrainz.AuthorizationScope.Email"/> permission has been granted.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.RefreshBearerToken(System.String,System.String)">
            <summary>Refreshes a bearer token.</summary>
            <param name="refreshToken">The refresh token to use.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
            <returns>The obtained bearer token.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.RefreshBearerTokenAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Refreshes a bearer token.</summary>
            <param name="refreshToken">The refresh token to use.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The obtained bearer token.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.RevokeToken(System.String,System.String)">
            <summary>Revokes a token.</summary>
            <param name="token">The token to revoke. This can be either an access token or a refresh token.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.RevokeTokenAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Revokes a token.</summary>
            <param name="token">The token to revoke. This can be either an access token or a refresh token.</param>
            <param name="clientSecret">The client secret associated with <see cref="P:MetaBrainz.MusicBrainz.OAuth2.ClientId"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.Close">
            <summary>Closes the underlying web service client in use by this OAuth2 client, if one has been created.</summary>
            <remarks>The next web service request will create a new client.</remarks>
            <exception cref="T:System.InvalidOperationException">When this instance is using an explicitly provided client instance.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.ConfigureClient(System.Action{System.Net.Http.HttpClient})">
            <summary>Sets up code to run to configure a newly-created HTTP client.</summary>
            <param name="code">The configuration code for an HTTP client, or <see langword="null"/> to clear such code.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.ConfigureClientCreation(System.Func{System.Net.Http.HttpClient})">
            <summary>Sets up code to run to create an HTTP client.</summary>
            <param name="code">The creation code for an HTTP client, or <see langword="null"/> to clear such code.</param>
            <remarks>
            Any code set via <see cref="M:MetaBrainz.MusicBrainz.OAuth2.ConfigureClient(System.Action{System.Net.Http.HttpClient})"/> will be applied to the client
            returned by <paramref name="code"/>.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.Dispose">
            <summary>Discards all resources held by this OAuth client, if any.</summary>
            <remarks>Further attempts at web service requests will cause <see cref="T:System.ObjectDisposedException"/> to be thrown.</remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.OAuth2.Finalize">
            <summary>Finalizes this instance, releasing any and all resources.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.AuthorizationToken">
            <summary>Class representing an OAuth2 authorization token.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.AccessToken">
            <summary>The access token (i.e. the one you use for authenticated requests).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.Lifetime">
            <summary>The lifetime of the token, in seconds (typically one hour).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.RefreshToken">
            <summary>The refresh token (i.e. the one you use to get a new access token).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.TokenType">
            <summary>The type of this authorization token.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.ToString">
            <summary>Gets the textual representation of this authorization token.</summary>
            <returns><see cref="P:MetaBrainz.MusicBrainz.Objects.AuthorizationToken.AccessToken"/>.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.DiscIdLookupResult.ToString">
            <summary>Gets the textual representation of the disc ID lookup result.</summary>
            <returns>A string describing the lookup results.</returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.Submissions.BarcodeSubmission">
            <summary>A submission request for adding barcodes to releases.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.BarcodeSubmission.Add(System.Guid,System.String)">
            <summary>Adds a barcode to the request.</summary>
            <param name="mbid">The MBID of the release to which <paramref name="barcode"/> should be added.</param>
            <param name="barcode">The barcode to add to the release. This must be a valid EAN.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.BarcodeSubmission.Add(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.String)">
            <summary>Adds a barcode to the request.</summary>
            <param name="release">The release to which <paramref name="barcode"/> should be added.</param>
            <param name="barcode">The barcode to add. This must be a valid EAN.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.Submissions.IsrcSubmission">
            <summary>A submission request for adding ISRCs to recordings.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.IsrcSubmission.Add(System.Guid,System.String[])">
            <summary>Adds one or more ISRCs to the request.</summary>
            <param name="mbid">The MBID of the recording to which <paramref name="isrcs"/> should be added.</param>
            <param name="isrcs">One or more (valid) ISRCs to add to the recording.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.IsrcSubmission.Add(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.String[])">
            <summary>Adds a barcode to the request.</summary>
            <param name="recording">The recording to which <paramref name="isrcs"/> should be added.</param>
            <param name="isrcs">One or more (valid) ISRCs to add to the recording.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.Submissions.RatingSubmission">
            <summary>A submission request for adding ratings to various entities.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.RatingSubmission.Add(System.Byte,MetaBrainz.MusicBrainz.EntityType,System.Guid)">
            <summary>Adds the specified rating to the specified entity.</summary>
            <param name="rating">The rating to add (1-100), or 0 to remove the rating.</param>
            <param name="entityType">
            The type of entity identified by <paramref name="mbid"/>; must be an entity that supports ratings.
            </param>
            <param name="mbid">The MBID of the entity to rate.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.RatingSubmission.Add(System.Byte,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Adds the specified rating to the specified entities.</summary>
            <param name="rating">The rating to add (1-100), or 0 to remove the rating.</param>
            <param name="entityType">
            The type of entity identified by <paramref name="mbids"/>; must be an entity that supports ratings.
            </param>
            <param name="mbids">The MBIDs of the entities to rate.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.RatingSubmission.Add(System.Byte,MetaBrainz.MusicBrainz.Interfaces.Entities.IRatableEntity)">
            <summary>Adds the specified rating to the specified entity.</summary>
            <param name="rating">The rating to add (1-100), or 0 to remove the rating.</param>
            <param name="entity">The entity to rate.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.RatingSubmission.Add(System.Byte,MetaBrainz.MusicBrainz.Interfaces.Entities.IRatableEntity[])">
            <summary>Adds the specified rating to the specified entity.</summary>
            <param name="rating">The rating to add (1-100), or 0 to remove the rating.</param>
            <param name="entities">The entities to rate.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.Submissions.Submission">
            <summary>Base class for the submission request classes.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.Submission.Submit">
            <summary>Submits the request.</summary>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.Submission.SubmitAsync(System.Threading.CancellationToken)">
            <summary>Submits the request asynchronously.</summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission">
            <summary>A submission request for modifying tags on various entities.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(MetaBrainz.MusicBrainz.EntityType,System.Guid,MetaBrainz.MusicBrainz.TagVote,System.String[])">
            <summary>Votes for the specified tags on the specified entity.</summary>
            <param name="entityType">
            The type of entity identified by <paramref name="mbid"/>; must be an entity that supports tags.
            </param>
            <param name="mbid">The MBID of the entity to tag.</param>
            <param name="vote">The vote to apply to the tags.</param>
            <param name="tags">The tags to vote for.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity,MetaBrainz.MusicBrainz.TagVote,System.String[])">
            <summary>Votes for the specified tags on the specified entity.</summary>
            <param name="entity">The entity to tag.</param>
            <param name="vote">The vote to apply to the tags.</param>
            <param name="tags">The tags to vote for.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(System.String,MetaBrainz.MusicBrainz.TagVote,MetaBrainz.MusicBrainz.EntityType,System.Guid)">
            <summary>Votes for the specified tag on the specified entity.</summary>
            <param name="tag">The tag to vote for.</param>
            <param name="vote">The vote to apply to the tag.</param>
            <param name="entityType">
            The type of entity identified by <paramref name="mbid"/>; must be an entity that supports tags.
            </param>
            <param name="mbid">The MBID of the entity to tag.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(System.String,MetaBrainz.MusicBrainz.TagVote,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Votes for the specified tag on the specified entities.</summary>
            <param name="tag">The tag to vote for.</param>
            <param name="vote">The vote to apply to the tag.</param>
            <param name="entityType">
            The type of entity identified by <paramref name="mbids"/>; must be an entity that supports tags.
            </param>
            <param name="mbids">The MBIDs of the entities to tag.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(System.String,MetaBrainz.MusicBrainz.TagVote,MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity)">
            <summary>Votes for the specified tag on the specified entity.</summary>
            <param name="tag">The tag to vote for.</param>
            <param name="vote">The vote to apply to the tag.</param>
            <param name="entity">The entity to tag.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Objects.Submissions.TagSubmission.Add(System.String,MetaBrainz.MusicBrainz.TagVote,MetaBrainz.MusicBrainz.Interfaces.Entities.ITaggableEntity[])">
            <summary>Votes for the specified tag on the specified entities.</summary>
            <param name="tag">The tag to vote for.</param>
            <param name="vote">The vote to apply to the tag.</param>
            <param name="entities">The entities to tag.</param>
            <returns>This submission request.</returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.PartialDate">
            <summary>A partial date. Can contain any or all of year, month and day.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Creates a new partial date with the specified year/month/day components.</summary>
            <param name="year">The year component, if any.</param>
            <param name="month">The month component, if any.</param>
            <param name="day">The day component, if any.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="month"/> and/or <paramref name="day"/> have an invalid value.
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.#ctor(System.String)">
            <summary>Creates a new partial date based on the given string representation.</summary>
            <param name="text">
            The text form for the date.
            Should be in the same form as produced by <see cref="M:MetaBrainz.MusicBrainz.PartialDate.ToString"/>, i.e. <c>YYYY[-MM[-DD]]</c>, with question marks used for
            unspecified parts.
            </param>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.PartialDate.Empty">
            <summary>An empty partial date.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.PartialDate.MinYear">
            <summary>The smallest value allowed for a partial date's year component.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.PartialDate.MaxYear">
            <summary>The largest value allowed for a partial date's year component.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.PartialDate.Year">
            <summary>The year component, if any, of this partial date.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.PartialDate.Month">
            <summary>The month component, if any, of this partial date.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.PartialDate.Day">
            <summary>The day component, if any, of this partial date.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.PartialDate.IsEmpty">
            <summary>A flag indicating whether or not this partial date is empty.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.PartialDate.NearestDate">
            <summary>
            The nearest complete (Gregorian) date/time value for this partial date.
            An unspecified year, month or day is considered to be 1.
            </summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.ToString">
            <summary>Converts this partial date to a string representation.</summary>
            <returns>A string of the form <c>YYYY[-MM[-DD]]</c>, with question marks used for unspecified parts.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.CompareTo(MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Compares two partial dates.</summary>
            <param name="other">The partial date to compare to this one.</param>
            <returns>
            -1 if this partial date precedes <paramref name="other"/>, 1 if <paramref name="other"/> precedes this partial date, and 0
            otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_LessThan(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Compares two partial dates.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="lhs"/> precedes <paramref name="rhs"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_LessThanOrEqual(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Compares two partial dates.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="rhs"/> does not precede <paramref name="lhs"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_GreaterThanOrEqual(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Compares two partial dates.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="lhs"/> does not precede <paramref name="rhs"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_GreaterThan(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Compares two partial dates.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="rhs"/> precedes <paramref name="lhs"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.Equals(System.Object)">
            <summary>Determines whether or not a given object is a partial date with the same contents as this one.</summary>
            <param name="obj">The object to compare to this one.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:MetaBrainz.MusicBrainz.PartialDate"/> and has the same contents as this one;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.Equals(MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Determines whether or not two partial dates have the same contents.</summary>
            <param name="other">The partial date to compare to this one.</param>
            <returns>
            <see langword="true"/> if the two partial dates have the same contents; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.GetHashCode">
            <summary>Gets a hash code for this partial date.</summary>
            <returns>
            The value of this partial date as an integer of the form <c>YYYYMMDD</c>, with 0 used for unspecified components.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_Equality(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Determines whether or not two partial dates have the same contents.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="lhs"/> and <paramref name="rhs"/> have the same contents; <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.PartialDate.op_Inequality(MetaBrainz.MusicBrainz.PartialDate,MetaBrainz.MusicBrainz.PartialDate)">
            <summary>Determines whether or not two partial dates have the same contents.</summary>
            <param name="lhs">The first partial date to compare.</param>
            <param name="rhs">The seconds partial date to compare .</param>
            <returns>
            <see langword="true"/> if <paramref name="lhs"/> and <paramref name="rhs"/> do not have have the same contents;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.Query">
            <summary>Class providing access to the MusicBrainz API.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreas(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the areas in the given collection.</summary>
            <param name="collection">The collection whose contained areas should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested areas.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionAreas(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the areas in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained areas should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested areas.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreas(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the areas in the given collection.</summary>
            <param name="collection">The collection whose contained areas should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreasAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the areas in the given collection.</summary>
            <param name="collection">The collection whose contained areas should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionAreas(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the areas in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained areas should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionAreasAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the areas in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained areas should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the artists associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="area">The area whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="collection">The collection whose contained artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="recording">The recording whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given release.</summary>
            <param name="release">The release whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given work.</summary>
            <param name="work">The work whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordingArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroupArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllWorkArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given work.</summary>
            <param name="mbid">The MBID for the work whose artists should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested artists.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="area">The area whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="collection">The collection whose contained artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="recording">The recording whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given release.</summary>
            <param name="release">The release whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtists(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the releases associated with the given work.</summary>
            <param name="work">The work whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="area">The area whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="collection">The collection whose contained artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="recording">The recording whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given release.</summary>
            <param name="release">The release whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given work.</summary>
            <param name="work">The work whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorkArtists(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the artists associated with the given work.</summary>
            <param name="mbid">The MBID for the work whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorkArtistsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the artists associated with the given work.</summary>
            <param name="mbid">The MBID for the work whose artists should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given area.</summary>
            <param name="mbid">The MBID for the area whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given artist.</summary>
            <param name="mbid">The MBID for the artist whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given area.</summary>
            <param name="area">The area whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given artist.</summary>
            <param name="artist">The artist whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given event.</summary>
            <param name="event">The event whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given instrument.</summary>
            <param name="instrument">The instrument whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given label.</summary>
            <param name="label">The label whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given place.</summary>
            <param name="place">The place whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given recording.</summary>
            <param name="recording">The recording whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given release.</summary>
            <param name="release">The release whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given release group.</summary>
            <param name="releaseGroup">The release group whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given series.</summary>
            <param name="series">The series whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given work.</summary>
            <param name="work">The work whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEditorCollections(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections of the given editor.</summary>
            <param name="editor">The editor whose collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEventCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given event.</summary>
            <param name="mbid">The MBID for the event whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllInstrumentCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given instrument.</summary>
            <param name="mbid">The MBID for the instrument whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllLabelCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given label.</summary>
            <param name="mbid">The MBID for the label whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllPlaceCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given place.</summary>
            <param name="mbid">The MBID for the place whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordingCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given recording.</summary>
            <param name="mbid">The MBID for the recording whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given release.</summary>
            <param name="mbid">The MBID for the release whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroupCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given release group.</summary>
            <param name="mbid">The MBID for the release group whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllSeriesCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given series.</summary>
            <param name="mbid">The MBID for the series whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllWorkCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns the collections that include the given work.</summary>
            <param name="mbid">The MBID for the work whose containing collections should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>
            The requested collections.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given area.</summary>
            <param name="mbid">The MBID for the area whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given area.</summary>
            <param name="mbid">The MBID for the area whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given artist.</summary>
            <param name="mbid">The MBID for the artist whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given artist.</summary>
            <param name="mbid">The MBID for the artist whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given area.</summary>
            <param name="area">The area whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given artist.</summary>
            <param name="artist">The artist whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given event.</summary>
            <param name="event">The event whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given instrument.</summary>
            <param name="instrument">The instrument whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given label.</summary>
            <param name="label">The label whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given place.</summary>
            <param name="place">The place whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given recording.</summary>
            <param name="recording">The recording whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given release.</summary>
            <param name="release">The release whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given release group.</summary>
            <param name="releaseGroup">The release group whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given series.</summary>
            <param name="series">The series whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollections(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given work.</summary>
            <param name="work">The work whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given area.</summary>
            <param name="area">The area whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given artist.</summary>
            <param name="artist">The artist whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given event.</summary>
            <param name="event">The event whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given instrument.</summary>
            <param name="instrument">The instrument whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given label.</summary>
            <param name="label">The label whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given place.</summary>
            <param name="place">The place whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given recording.</summary>
            <param name="recording">The recording whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given release.</summary>
            <param name="release">The release whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given release group.</summary>
            <param name="releaseGroup">The release group whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given series.</summary>
            <param name="series">The series whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given work.</summary>
            <param name="work">The work whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEditorCollections(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections of the given editor.</summary>
            <param name="editor">The editor whose collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEditorCollectionsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections of the given editor.</summary>
            <param name="editor">The editor whose collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given event.</summary>
            <param name="mbid">The MBID for the event whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given event.</summary>
            <param name="mbid">The MBID for the event whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseInstrumentCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given instrument.</summary>
            <param name="mbid">The MBID for the instrument whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseInstrumentCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given instrument.</summary>
            <param name="mbid">The MBID for the instrument whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given label.</summary>
            <param name="mbid">The MBID for the label whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given label.</summary>
            <param name="mbid">The MBID for the label whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaceCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given place.</summary>
            <param name="mbid">The MBID for the place whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaceCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given place.</summary>
            <param name="mbid">The MBID for the place whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given recording.</summary>
            <param name="mbid">The MBID for the recording whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given recording.</summary>
            <param name="mbid">The MBID for the recording whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given release.</summary>
            <param name="mbid">The MBID for the release whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given release.</summary>
            <param name="mbid">The MBID for the release whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given release group.</summary>
            <param name="mbid">The MBID for the release group whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given release group.</summary>
            <param name="mbid">The MBID for the release group whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseSeriesCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given series.</summary>
            <param name="mbid">The MBID for the series whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseSeriesCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given series.</summary>
            <param name="mbid">The MBID for the series whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorkCollections(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the collections that include the given work.</summary>
            <param name="mbid">The MBID for the work whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorkCollectionsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the collections that include the given work.</summary>
            <param name="mbid">The MBID for the work whose containing collections should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given area.</summary>
            <param name="area">The area whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given artist.</summary>
            <param name="artist">The artist whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events in the given collection.</summary>
            <param name="collection">The collection whose contained events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given place.</summary>
            <param name="place">The place whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllPlaceEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the events associated with the given place.</summary>
            <param name="mbid">The MBID for the place whose events should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested events.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaEventsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistEventsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionEventsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given area.</summary>
            <param name="area">The area whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given artist.</summary>
            <param name="artist">The artist whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events in the given collection.</summary>
            <param name="collection">The collection whose contained events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEvents(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given place.</summary>
            <param name="place">The place whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given area.</summary>
            <param name="area">The area whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given artist.</summary>
            <param name="artist">The artist whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events in the given collection.</summary>
            <param name="collection">The collection whose contained events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseEventsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given place.</summary>
            <param name="place">The place whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaceEvents(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the events associated with the given place.</summary>
            <param name="mbid">The MBID for the place whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaceEventsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the events associated with the given place.</summary>
            <param name="mbid">The MBID for the place whose events should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllGenres(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Returns (the specified subset of) the genres known to MusicBrainz.</summary>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <returns>The browse request, including the initial results.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllGenresAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the genres known to MusicBrainz.</summary>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.GetAllGenreNames">
            <summary>Gets the names of all genres known to MusicBrainz.</summary>
            <returns>All genre names, in alphabetical order.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.GetAllGenreNamesAsync(System.Threading.CancellationToken)">
            <summary>Gets the names of all genres known to MusicBrainz.</summary>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>All genre names, in alphabetical order.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllInstruments(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the instruments in the given collection.</summary>
            <param name="collection">The collection whose contained instruments should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested instruments.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionInstruments(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the instruments in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained instruments should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested instruments.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseInstruments(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the instruments in the given collection.</summary>
            <param name="collection">The collection whose contained instruments should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseInstrumentsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the instruments in the given collection.</summary>
            <param name="collection">The collection whose contained instruments should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionInstruments(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the instruments in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained instruments should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionInstrumentsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the instruments in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained instruments should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels associated with the given area.</summary>
            <param name="area">The area whose labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels in the given collection.</summary>
            <param name="collection">The collection whose contained labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels associated with the given release.</summary>
            <param name="release">The release whose labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the labels associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose labels should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested labels.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaLabelsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionLabelsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels associated with the given area.</summary>
            <param name="area">The area whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels in the given collection.</summary>
            <param name="collection">The collection whose contained labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabels(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels associated with the given release.</summary>
            <param name="release">The release whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels associated with the given area.</summary>
            <param name="area">The area whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels in the given collection.</summary>
            <param name="collection">The collection whose contained labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels associated with the given release.</summary>
            <param name="release">The release whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseLabels(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the labels associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseLabelsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the labels associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose labels should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaPlaces(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the places associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose places should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested places.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionPlaces(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the places in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained places should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested places.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllPlaces(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the places associated with the given area.</summary>
            <param name="area">The area whose places should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested places.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllPlaces(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the places in the given collection.</summary>
            <param name="collection">The collection whose contained places should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested places.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaPlaces(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the places associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaPlacesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the places associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionPlaces(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the places in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionPlacesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the places in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaces(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the places associated with the given area.</summary>
            <param name="area">The area whose places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlaces(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the places in the given collection.</summary>
            <param name="collection">The collection whose contained places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlacesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the places associated with the given area.</summary>
            <param name="area">The area whose places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowsePlacesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the places in the given collection.</summary>
            <param name="collection">The collection whose contained places should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings associated with the given artist.</summary>
            <param name="artist">The artist whose recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings in the given collection.</summary>
            <param name="collection">The collection whose contained recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings associated with the given release.</summary>
            <param name="release">The release whose recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the recordings associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose recordings should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested recordings.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistRecordingsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionRecordingsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings associated with the given artist.</summary>
            <param name="artist">The artist whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings in the given collection.</summary>
            <param name="collection">The collection whose contained recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordings(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings associated with the given release.</summary>
            <param name="release">The release whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings associated with the given artist.</summary>
            <param name="artist">The artist whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings in the given collection.</summary>
            <param name="collection">The collection whose contained recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings associated with the given release.</summary>
            <param name="release">The release whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseRecordings(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the recordings associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseRecordingsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the recordings associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose recordings should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            Currently a release can only be part of a single release group, so assuming <paramref name="mbid"/> is valid, this should
            always return exactly one result.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups associated with the given artist.</summary>
            <param name="artist">The artist whose release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups in the given collection.</summary>
            <param name="collection">The collection whose contained release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns the release groups associated with the given release.</summary>
            <param name="release">The release whose release groups should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>
            The requested release groups.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            Currently a release can only be part of a single release group, so this should always return exactly one result.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.BrowseArtistReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseReleaseGroups(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseReleaseGroupsAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups associated with the given release.</summary>
            <param name="mbid">The MBID for the release whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            Currently a release can only be part of a single release group, so assuming <paramref name="mbid"/> is valid, this should
            always return exactly one result.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns (the specified subset of) the release groups associated with the given artist.</summary>
            <param name="artist">The artist whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns (the specified subset of) the release groups in the given collection.</summary>
            <param name="collection">The collection whose contained release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroups(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType})">
            <summary>Returns (the specified subset of) the release groups associated with the given release.</summary>
            <param name="release">The release whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            Currently a release can only be part of a single release group, so this should always return exactly one result.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups associated with the given artist.</summary>
            <param name="artist">The artist whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups in the given collection.</summary>
            <param name="collection">The collection whose contained release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupsAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the release groups associated with the given release.</summary>
            <param name="release">The release whose release groups should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            Currently a release can only be part of a single release group, so this should always return exactly one result.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllAreaReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllLabelReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given label.</summary>
            <param name="mbid">The MBID for the label whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllRecordingReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleaseGroupReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given area.</summary>
            <param name="area">The area whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given artist.</summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases in the given collection.</summary>
            <param name="collection">The collection whose contained releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given label.</summary>
            <param name="label">The label whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given recording.</summary>
            <param name="recording">The recording whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given track.</summary>
            <param name="track">The track whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllTrackArtistReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>
            Returns the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllTrackArtistReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>
            Returns the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllTrackReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns the releases associated with the given track.</summary>
            <param name="mbid">The MBID for the track whose releases should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>
            The requested releases.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAreaReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="mbid">The MBID for the area whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given label.</summary>
            <param name="mbid">The MBID for the label whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseLabelReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given label.</summary>
            <param name="mbid">The MBID for the label whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseRecordingReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="mbid">The MBID for the recording whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleaseGroupReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="mbid">The MBID for the release group whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="area">The area whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given artist.</summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases in the given collection.</summary>
            <param name="collection">The collection whose contained releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given label.</summary>
            <param name="label">The label whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="recording">The recording whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given track.</summary>
            <param name="track">The track whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given area.</summary>
            <param name="area">The area whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given artist.</summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases in the given collection.</summary>
            <param name="collection">The collection whose contained releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given label.</summary>
            <param name="label">The label whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given recording.</summary>
            <param name="recording">The recording whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given release group.</summary>
            <param name="releaseGroup">The release group whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ITrack,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given track.</summary>
            <param name="track">The track whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackArtistReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>
            Returns (the specified subset of) the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackArtistReleases(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>
            Returns (the specified subset of) the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackArtistReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>
            Returns (the specified subset of) the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="mbid">The MBID for the artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackArtistReleasesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>
            Returns (the specified subset of) the releases that include the given artist in a track-level artist credit only.
            </summary>
            <param name="artist">The artist whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackReleases(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Returns (the specified subset of) the releases associated with the given track.</summary>
            <param name="mbid">The MBID for the track whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseTrackReleasesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the releases associated with the given track.</summary>
            <param name="mbid">The MBID for the track whose releases should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">The release type to filter on (if any).</param>
            <param name="status">The release status to filter on (if any).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionSeries(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the series in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained series should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested series.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllSeries(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the series in the given collection.</summary>
            <param name="collection">The collection whose contained series should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested series.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionSeries(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the series in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained series should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionSeriesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the series in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained series should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseSeries(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the series in the given collection.</summary>
            <param name="collection">The collection whose contained series should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseSeriesAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the series in the given collection.</summary>
            <param name="collection">The collection whose contained series should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllArtistWorks(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the works associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose works should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested works.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllCollectionWorks(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the works in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained works should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested works.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllWorks(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the works associated with the given artist.</summary>
            <param name="artist">The artist whose works should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested works.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseAllWorks(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns the works in the given collection.</summary>
            <param name="collection">The collection whose contained works should be retrieved.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>
            The requested works.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistWorks(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the works associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseArtistWorksAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the works associated with the given artist.</summary>
            <param name="mbid">The MBID for the artist whose works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionWorks(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the works in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseCollectionWorksAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the works in the given collection.</summary>
            <param name="mbid">The MBID for the collection whose contained works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorks(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the works associated with the given artist.</summary>
            <param name="artist">The artist whose works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorks(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include)">
            <summary>Returns (the specified subset of) the works in the given collection.</summary>
            <param name="collection">The collection whose contained works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorksAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the works associated with the given artist.</summary>
            <param name="artist">The artist whose works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.BrowseWorksAsync(MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Nullable{System.Int32},System.Nullable{System.Int32},MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Returns (the specified subset of) the works in the given collection.</summary>
            <param name="collection">The collection whose contained works should be retrieved.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The browse request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea)">
            <summary>Adds the specified area to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="area"/> to.</param>
            <param name="area">The area to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea})">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea)">
            <summary>Adds the specified area to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="area"/> to.</param>
            <param name="area">The area to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea})">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="areas"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Threading.CancellationToken)">
            <summary>Adds the specified area to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="area"/> to.</param>
            <param name="area">The area to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea},System.Threading.CancellationToken)">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="areas"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Threading.CancellationToken)">
            <summary>Adds the specified area to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="area"/> to.</param>
            <param name="area">The area to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea},System.Threading.CancellationToken)">
            <summary>Adds the specified areas to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="areas"/> to.</param>
            <param name="areas">The areas to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea)">
            <summary>Removes the specified area from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="area"/> from.</param>
            <param name="area">The area to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea})">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea)">
            <summary>Removes the specified area from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="area"/> from.</param>
            <param name="area">The area to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea})">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="areas"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Threading.CancellationToken)">
            <summary>Removes the specified area from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="area"/> from.</param>
            <param name="area">The area to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea},System.Threading.CancellationToken)">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="areas"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea,System.Threading.CancellationToken)">
            <summary>Removes the specified area from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="area"/> from.</param>
            <param name="area">The area to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArea[])">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArea},System.Threading.CancellationToken)">
            <summary>Removes the specified areas from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="areas"/> from.</param>
            <param name="areas">The areas to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist)">
            <summary>Adds the specified artist to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artist"/> to.</param>
            <param name="artist">The artist to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist})">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist)">
            <summary>Adds the specified artist to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artist"/> to.</param>
            <param name="artist">The artist to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist})">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artists"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Threading.CancellationToken)">
            <summary>Adds the specified artist to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artist"/> to.</param>
            <param name="artist">The artist to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist},System.Threading.CancellationToken)">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artists"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Threading.CancellationToken)">
            <summary>Adds the specified artist to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artist"/> to.</param>
            <param name="artist">The artist to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist},System.Threading.CancellationToken)">
            <summary>Adds the specified artists to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="artists"/> to.</param>
            <param name="artists">The artists to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist)">
            <summary>Removes the specified artist from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artist"/> from.</param>
            <param name="artist">The artist to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist})">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist)">
            <summary>Removes the specified artist from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artist"/> from.</param>
            <param name="artist">The artist to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist})">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artists"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Threading.CancellationToken)">
            <summary>Removes the specified artist from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artist"/> from.</param>
            <param name="artist">The artist to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist},System.Threading.CancellationToken)">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artists"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist,System.Threading.CancellationToken)">
            <summary>Removes the specified artist from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artist"/> from.</param>
            <param name="artist">The artist to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist[])">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IArtist},System.Threading.CancellationToken)">
            <summary>Removes the specified artists from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="artists"/> from.</param>
            <param name="artists">The artists to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid)">
            <summary>Adds the specified item to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="item"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="item">The MBID of the item to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="items"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="items"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid)">
            <summary>Adds the specified item to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="item"/> to.</param>
            <param name="item">The MBID of the item to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="items"/> to.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="items"/> to.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Threading.CancellationToken,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="items"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid,System.Threading.CancellationToken)">
            <summary>Adds the specified item to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="item"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="item">The MBID of the item to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="items"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="items"/> to.</param>
            <param name="entityType">The type of entity stored in the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="items"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid,System.Threading.CancellationToken)">
            <summary>Adds the specified item to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="item"/> to.</param>
            <param name="item">The MBID of the item to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid[])">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="items"/> to.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>Adds the specified items to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="items"/> to.</param>
            <param name="items">The MBIDs of the items to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid)">
            <summary>Removes the specified item from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="item"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="item">The MBID of the item to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="items"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="items"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid)">
            <summary>Removes the specified item from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="item"/> from.</param>
            <param name="item">The MBID of the item to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="items"/> from.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="items"/> from.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Threading.CancellationToken,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="items"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid,System.Threading.CancellationToken)">
            <summary>Removes the specified item from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="item"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="item">The MBID of the item to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="items"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.EntityType,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="items"/> from.</param>
            <param name="entityType">The entity type for the collection identified by <paramref name="collection"/>.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="items"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid,System.Threading.CancellationToken)">
            <summary>Removes the specified item from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="item"/> from.</param>
            <param name="item">The MBID of the item to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Guid[])">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="items"/> from.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>Removes the specified items from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="items"/> from.</param>
            <param name="items">The MBIDs of the items to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent)">
            <summary>Adds the specified event to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="event"/> to.</param>
            <param name="event">The event to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent})">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent)">
            <summary>Adds the specified event to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="event"/> to.</param>
            <param name="event">The event to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent})">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="events"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Threading.CancellationToken)">
            <summary>Adds the specified event to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="event"/> to.</param>
            <param name="event">The event to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent},System.Threading.CancellationToken)">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="events"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Threading.CancellationToken)">
            <summary>Adds the specified event to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="event"/> to.</param>
            <param name="event">The event to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent},System.Threading.CancellationToken)">
            <summary>Adds the specified events to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="events"/> to.</param>
            <param name="events">The events to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent)">
            <summary>Removes the specified event from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="event"/> from.</param>
            <param name="event">The event to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent})">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent)">
            <summary>Removes the specified event from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="event"/> from.</param>
            <param name="event">The event to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent})">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="events"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Threading.CancellationToken)">
            <summary>Removes the specified event from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="event"/> from.</param>
            <param name="event">The event to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent},System.Threading.CancellationToken)">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="events"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent,System.Threading.CancellationToken)">
            <summary>Removes the specified event from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="event"/> from.</param>
            <param name="event">The event to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent[])">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IEvent},System.Threading.CancellationToken)">
            <summary>Removes the specified events from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="events"/> from.</param>
            <param name="events">The events to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument)">
            <summary>Adds the specified instrument to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instrument"/> to.</param>
            <param name="instrument">The instrument to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument})">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument)">
            <summary>Adds the specified instrument to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instrument"/> to.</param>
            <param name="instrument">The instrument to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument})">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instruments"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Threading.CancellationToken)">
            <summary>Adds the specified instrument to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instrument"/> to.</param>
            <param name="instrument">The instrument to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument},System.Threading.CancellationToken)">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instruments"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Threading.CancellationToken)">
            <summary>Adds the specified instrument to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instrument"/> to.</param>
            <param name="instrument">The instrument to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument},System.Threading.CancellationToken)">
            <summary>Adds the specified instruments to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="instruments"/> to.</param>
            <param name="instruments">The instruments to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument)">
            <summary>Removes the specified instrument from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instrument"/> from.</param>
            <param name="instrument">The instrument to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument})">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument)">
            <summary>Removes the specified instrument from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instrument"/> from.</param>
            <param name="instrument">The instrument to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument})">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instruments"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Threading.CancellationToken)">
            <summary>Removes the specified instrument from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instrument"/> from.</param>
            <param name="instrument">The instrument to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument},System.Threading.CancellationToken)">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instruments"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument,System.Threading.CancellationToken)">
            <summary>Removes the specified instrument from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instrument"/> from.</param>
            <param name="instrument">The instrument to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument[])">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IInstrument},System.Threading.CancellationToken)">
            <summary>Removes the specified instruments from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="instruments"/> from.</param>
            <param name="instruments">The instruments to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel)">
            <summary>Adds the specified label to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="label"/> to.</param>
            <param name="label">The label to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel})">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel)">
            <summary>Adds the specified label to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="label"/> to.</param>
            <param name="label">The label to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel})">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="labels"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Threading.CancellationToken)">
            <summary>Adds the specified label to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="label"/> to.</param>
            <param name="label">The label to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel},System.Threading.CancellationToken)">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="labels"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Threading.CancellationToken)">
            <summary>Adds the specified label to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="label"/> to.</param>
            <param name="label">The label to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel},System.Threading.CancellationToken)">
            <summary>Adds the specified labels to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="labels"/> to.</param>
            <param name="labels">The labels to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel)">
            <summary>Removes the specified label from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="label"/> from.</param>
            <param name="label">The label to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel})">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel)">
            <summary>Removes the specified label from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="label"/> from.</param>
            <param name="label">The label to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel})">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="labels"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Threading.CancellationToken)">
            <summary>Removes the specified label from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="label"/> from.</param>
            <param name="label">The label to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel},System.Threading.CancellationToken)">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="labels"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel,System.Threading.CancellationToken)">
            <summary>Removes the specified label from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="label"/> from.</param>
            <param name="label">The label to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel[])">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ILabel},System.Threading.CancellationToken)">
            <summary>Removes the specified labels from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="labels"/> from.</param>
            <param name="labels">The labels to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace)">
            <summary>Adds the specified place to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="place"/> to.</param>
            <param name="place">The place to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace})">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace)">
            <summary>Adds the specified place to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="place"/> to.</param>
            <param name="place">The place to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace})">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="places"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Threading.CancellationToken)">
            <summary>Adds the specified place to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="place"/> to.</param>
            <param name="place">The place to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace},System.Threading.CancellationToken)">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="places"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Threading.CancellationToken)">
            <summary>Adds the specified place to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="place"/> to.</param>
            <param name="place">The place to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace},System.Threading.CancellationToken)">
            <summary>Adds the specified places to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="places"/> to.</param>
            <param name="places">The places to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace)">
            <summary>Removes the specified place from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="place"/> from.</param>
            <param name="place">The place to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace})">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace)">
            <summary>Removes the specified place from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="place"/> from.</param>
            <param name="place">The place to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace})">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="places"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Threading.CancellationToken)">
            <summary>Removes the specified place from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="place"/> from.</param>
            <param name="place">The place to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace},System.Threading.CancellationToken)">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="places"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace,System.Threading.CancellationToken)">
            <summary>Removes the specified place from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="place"/> from.</param>
            <param name="place">The place to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace[])">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IPlace},System.Threading.CancellationToken)">
            <summary>Removes the specified places from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="places"/> from.</param>
            <param name="places">The places to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording)">
            <summary>Adds the specified recording to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recording"/> to.</param>
            <param name="recording">The recording to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording})">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording)">
            <summary>Adds the specified recording to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recording"/> to.</param>
            <param name="recording">The recording to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording})">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recordings"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Threading.CancellationToken)">
            <summary>Adds the specified recording to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recording"/> to.</param>
            <param name="recording">The recording to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording},System.Threading.CancellationToken)">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recordings"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Threading.CancellationToken)">
            <summary>Adds the specified recording to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recording"/> to.</param>
            <param name="recording">The recording to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording},System.Threading.CancellationToken)">
            <summary>Adds the specified recordings to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="recordings"/> to.</param>
            <param name="recordings">The recordings to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording)">
            <summary>Removes the specified recording from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recording"/> from.</param>
            <param name="recording">The recording to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording})">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording)">
            <summary>Removes the specified recording from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recording"/> from.</param>
            <param name="recording">The recording to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording})">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recordings"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Threading.CancellationToken)">
            <summary>Removes the specified recording from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recording"/> from.</param>
            <param name="recording">The recording to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording},System.Threading.CancellationToken)">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recordings"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording,System.Threading.CancellationToken)">
            <summary>Removes the specified recording from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recording"/> from.</param>
            <param name="recording">The recording to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording[])">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRecording},System.Threading.CancellationToken)">
            <summary>Removes the specified recordings from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="recordings"/> from.</param>
            <param name="recordings">The recordings to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup)">
            <summary>Adds the specified release group to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroup"/> to.</param>
            <param name="releaseGroup">The release group to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup})">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup)">
            <summary>Adds the specified release group to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroup"/> to.</param>
            <param name="releaseGroup">The release group to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup})">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Threading.CancellationToken)">
            <summary>Adds the specified release group to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroup"/> to.</param>
            <param name="releaseGroup">The release group to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup},System.Threading.CancellationToken)">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Threading.CancellationToken)">
            <summary>Adds the specified release group to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroup"/> to.</param>
            <param name="releaseGroup">The release group to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup},System.Threading.CancellationToken)">
            <summary>Adds the specified release groups to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releaseGroups"/> to.</param>
            <param name="releaseGroups">The release groups to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup)">
            <summary>Removes the specified release group from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroup"/> from.</param>
            <param name="releaseGroup">The release group to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup})">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup)">
            <summary>Removes the specified release group from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroup"/> from.</param>
            <param name="releaseGroup">The release group to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup})">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Threading.CancellationToken)">
            <summary>Removes the specified release group from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroup"/> from.</param>
            <param name="releaseGroup">The release group to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup},System.Threading.CancellationToken)">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup,System.Threading.CancellationToken)">
            <summary>Removes the specified release group from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroup"/> from.</param>
            <param name="releaseGroup">The release group to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup[])">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IReleaseGroup},System.Threading.CancellationToken)">
            <summary>Removes the specified release groups from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releaseGroups"/> from.</param>
            <param name="releaseGroups">The release groups to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease)">
            <summary>Adds the specified release to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="release"/> to.</param>
            <param name="release">The release to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease})">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease)">
            <summary>Adds the specified release to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="release"/> to.</param>
            <param name="release">The release to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease})">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releases"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Threading.CancellationToken)">
            <summary>Adds the specified release to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="release"/> to.</param>
            <param name="release">The release to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease},System.Threading.CancellationToken)">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releases"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Threading.CancellationToken)">
            <summary>Adds the specified release to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="release"/> to.</param>
            <param name="release">The release to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease},System.Threading.CancellationToken)">
            <summary>Adds the specified releases to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="releases"/> to.</param>
            <param name="releases">The releases to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease)">
            <summary>Removes the specified release from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="release"/> from.</param>
            <param name="release">The release to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease})">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease)">
            <summary>Removes the specified release from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="release"/> from.</param>
            <param name="release">The release to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease})">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releases"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Threading.CancellationToken)">
            <summary>Removes the specified release from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="release"/> from.</param>
            <param name="release">The release to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease},System.Threading.CancellationToken)">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releases"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease,System.Threading.CancellationToken)">
            <summary>Removes the specified release from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="release"/> from.</param>
            <param name="release">The release to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease[])">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IRelease},System.Threading.CancellationToken)">
            <summary>Removes the specified releases from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="releases"/> from.</param>
            <param name="releases">The releases to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries})">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries})">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Threading.CancellationToken)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries},System.Threading.CancellationToken)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Threading.CancellationToken)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries},System.Threading.CancellationToken)">
            <summary>Adds the specified series to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="series"/> to.</param>
            <param name="series">The series to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries})">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries})">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Threading.CancellationToken)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries},System.Threading.CancellationToken)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries,System.Threading.CancellationToken)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries[])">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.ISeries},System.Threading.CancellationToken)">
            <summary>Removes the specified series from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="series"/> from.</param>
            <param name="series">The series to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork)">
            <summary>Adds the specified work to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="work"/> to.</param>
            <param name="work">The work to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork})">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork)">
            <summary>Adds the specified work to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="work"/> to.</param>
            <param name="work">The work to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork})">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="works"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Threading.CancellationToken)">
            <summary>Adds the specified work to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="work"/> to.</param>
            <param name="work">The work to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork},System.Threading.CancellationToken)">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="works"/> to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Threading.CancellationToken)">
            <summary>Adds the specified work to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="work"/> to.</param>
            <param name="work">The work to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.AddToCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork},System.Threading.CancellationToken)">
            <summary>Adds the specified works to the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to add <paramref name="works"/> to.</param>
            <param name="works">The works to add to <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork)">
            <summary>Removes the specified work from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="work"/> from.</param>
            <param name="work">The work to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork})">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork)">
            <summary>Removes the specified work from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="work"/> from.</param>
            <param name="work">The work to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollection(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork})">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="works"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Threading.CancellationToken)">
            <summary>Removes the specified work from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="work"/> from.</param>
            <param name="work">The work to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,System.Guid,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork},System.Threading.CancellationToken)">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The MBID of the collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Threading.CancellationToken,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="works"/> from.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork,System.Threading.CancellationToken)">
            <summary>Removes the specified work from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="work"/> from.</param>
            <param name="work">The work to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,MetaBrainz.MusicBrainz.Interfaces.Entities.IWork[])">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.RemoveFromCollectionAsync(System.String,MetaBrainz.MusicBrainz.Interfaces.Entities.ICollection,System.Collections.Generic.IEnumerable{MetaBrainz.MusicBrainz.Interfaces.Entities.IWork},System.Threading.CancellationToken)">
            <summary>Removes the specified works from the specified collection.</summary>
            <param name="client">
            The ID of the client software making this request.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            </param>
            <param name="collection">The collection to remove <paramref name="works"/> from.</param>
            <param name="works">The works to remove from <paramref name="collection"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A message describing the result (usually "OK").</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Query.DefaultPageSize">
            <summary>
            The number of items returned by a browse or search request when no limit (or a limit smaller than 1) is specified.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Query.MaximumPageSize">
            <summary>The maximum number of items returned by a single browse or search request.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Query.UserAgentUrl">
            <summary>The URL included in the user agent for requests as part of this library's information.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Query.WebServiceRoot">
            <summary>The root location of the web service.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.DefaultPort">
            <summary>The default port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.DefaultServer">
            <summary>The default server to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.DefaultUrlScheme">
            <summary>The default URL scheme (internet access protocol) to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.DefaultUserAgent">
            <summary>The default user agent values to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.DelayBetweenRequests">
            <summary>
            The amount of seconds to leave between requests. Set to 0 (or a negative value) to send all requests as soon as they are
            made.
            </summary>
            <remarks>
            Note that this is a global delay, affecting all threads. When querying the official MusicBrainz site, setting this below the
            default of one second may incur penalties (ranging from rate limiting to IP bans). When setting this to 0 for maximum
            throughput, <see cref="P:MetaBrainz.MusicBrainz.Query.RateLimitInfo"/> can be used to avoid making too many requests and trigger these penalties.
            </remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.Query.TraceSource">
            <summary>The trace source (named 'MetaBrainz.MusicBrainz') used by this class.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>Initializes a new MusicBrainz query client instance using a specific HTTP client.</summary>
            <param name="client">The HTTP client to use.</param>
            <param name="takeOwnership">
            Indicates whether this MusicBrainz query client should take ownership of <paramref name="client"/>.<br/>
            If this is <see langword="false"/>, it remains owned by the caller; this means <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> will throw an exception
            and <see cref="M:MetaBrainz.MusicBrainz.Query.Dispose"/> will release the reference to <paramref name="client"/> without disposing it.<br/>
            If this is <see langword="true"/>, then this object takes ownership and treat it just like an HTTP client it created itself;
            this means <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> will dispose of it (with further requests creating a new HTTP client) and
            <see cref="M:MetaBrainz.MusicBrainz.Query.Dispose"/> will dispose the HTTP client too. Note that in this case, any default request headers set on
            <paramref name="client"/> will <em>not</em> be saved and used for further clients.
            </param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.Net.Http.Headers.ProductInfoHeaderValue[])">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="userAgent">The user agent values to use for all requests.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.Version,System.Uri)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically HTTP[S] or MAILTO) to use in the user agent property for all requests.
            </param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.Version,System.String)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically a URL or email address) to use in the user agent property for all requests.
            </param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.String)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.String,System.Uri)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically HTTP[S] or MAILTO) to use in the user agent property for all requests.
            </param>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new MusicBrainz query client instance.<br/>
            An HTTP client will be created when needed and can be discarded again via the <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method.
            </summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically a URL or email address) to use in the user agent property for all requests.
            </param>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.BaseUri">
            <summary>The base URI for all requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.BearerToken">
            <summary>The OAuth2 bearer token to use for authenticated requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.Port">
            <summary>The port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.RateLimitInfo">
            <summary>The rate limit information from the last web request issued via this MusicBrainz client.</summary>
            <remarks>
            This is mainly useful when setting <see cref="P:MetaBrainz.MusicBrainz.Query.DelayBetweenRequests"/> to 0, in order to manage the request volume to avoid
            triggering penalties.
            </remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.Server">
            <summary>The web site to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.UrlScheme">
            <summary>The URL scheme (internet access protocol) to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.Query.UserAgent">
            <summary>The user agent values to use for requests.</summary>
            <remarks>
            Note that changes to this list only take effect when a new HTTP client is created. The <see cref="M:MetaBrainz.MusicBrainz.Query.Close"/> method can be
            used to close the current client (if there is one) so that the next request creates a new client.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.Close">
            <summary>
            Closes the underlying web service client in use by this MusicBrainz query client, if there is one.</summary>
            <remarks>The next web service request will create a new client.</remarks>
            <exception cref="T:System.InvalidOperationException">When this instance is using an explicitly provided client instance.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.ConfigureClient(System.Action{System.Net.Http.HttpClient})">
            <summary>Sets up code to run to configure a newly-created HTTP client.</summary>
            <param name="code">The configuration code for an HTTP client, or <see langword="null"/> to clear such code.</param>
            <remarks>The configuration code will be called <em>after</em> <see cref="P:MetaBrainz.MusicBrainz.Query.UserAgent"/> is applied.</remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.ConfigureClientCreation(System.Func{System.Net.Http.HttpClient})">
            <summary>Sets up code to run to create an HTTP client.</summary>
            <param name="code">The creation code for an HTTP client, or <see langword="null"/> to clear such code.</param>
            <remarks>
            <see cref="P:MetaBrainz.MusicBrainz.Query.UserAgent"/> and any code set via <see cref="M:MetaBrainz.MusicBrainz.Query.ConfigureClient(System.Action{System.Net.Http.HttpClient})"/> will be
            applied to the client returned by <paramref name="code"/>.
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.Dispose">
            <summary>Discards any and all resources held by this MusicBrainz query client.</summary>
            <remarks>Further attempts at web service requests will cause <see cref="T:System.ObjectDisposedException"/> to be thrown.</remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.Finalize">
            <summary>Finalizes this instance, releasing any and all resources.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupArea(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified area.</summary>
            <param name="mbid">The MBID for the area to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested area.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupAreaAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified area.</summary>
            <param name="mbid">The MBID for the area to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested area.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupArtist(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Looks up the specified artist.</summary>
            <param name="mbid">The MBID for the artist to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.ReleaseGroups"/> and/or
            <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <returns>The requested artist.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupArtistAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Looks up the specified artist.</summary>
            <param name="mbid">The MBID for the artist to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.ReleaseGroups"/> and/or
            <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested artist.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupCollection(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified collection.</summary>
            <param name="mbid">The MBID for the collection to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested collection.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupCollectionAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified collection.</summary>
            <param name="mbid">The MBID for the collection to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested collection.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupDiscId(System.String,System.Int32[],MetaBrainz.MusicBrainz.Include,System.Boolean,System.Boolean)">
            <summary>Looks up the specified disc ID.</summary>
            <param name="discid">
            The disc ID to look up.
            When <paramref name="toc"/> is specified, this can be <c>"-"</c> to indicate that only a fuzzy TOC lookup should be done.
            </param>
            <param name="toc">
            The TOC (table of contents) to use for a fuzzy lookup if <paramref name="discid"/> has no exact matches.
            The array should contain the first track number, last track number and the address of the disc's lead-out (in sectors),
            followed by the start address of each track (in sectors).
            </param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="allMedia">
            If <see langword="true"/>, all media types are considered for a fuzzy lookup; otherwise, only CDs are considered.
            </param>
            <param name="noStubs">If <see langword="true"/>, CD stubs are not returned.</param>
            <returns>The result of the disc ID lookup. This can be a single disc or CD stub, or a list of matching releases.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupDiscIdAsync(System.String,System.Int32[],MetaBrainz.MusicBrainz.Include,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Looks up the specified disc ID.</summary>
            <param name="discid">
            The disc ID to look up.
            When <paramref name="toc"/> is specified, this can be <c>"-"</c> to indicate that only a fuzzy TOC lookup should be done.
            </param>
            <param name="toc">
            The TOC (table of contents) to use for a fuzzy lookup if <paramref name="discid"/> has no exact matches.
            The array should contain the first track number, last track number and the address of the disc's lead-out (in sectors),
            followed by the start address of each track (in sectors).
            </param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="allMediaFormats">
            If <see langword="true"/>, all media formats are considered for a fuzzy lookup; otherwise, only CDs are considered.
            </param>
            <param name="noStubs">If <see langword="true"/>, CD stubs are not returned.</param>
            <returns>The result of the disc ID lookup. This can be a single disc or CD stub, or a list
            of matching releases.
            </returns>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupEvent(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified event.</summary>
            <param name="mbid">The MBID for the event to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested event.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupEventAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified event.</summary>
            <param name="mbid">The MBID for the event to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested event.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupGenre(System.Guid)">
            <summary>Looks up the specified genre.</summary>
            <param name="mbid">The MBID for the genre to look up.</param>
            <returns>The requested genre.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupGenreAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>Looks up the specified genre.</summary>
            <param name="mbid">The MBID for the genre to look up.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested genre.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupInstrument(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified instrument.</summary>
            <param name="mbid">The MBID for the instrument to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested instrument.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupInstrumentAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified instrument.</summary>
            <param name="mbid">The MBID for the instrument to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested instrument.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupIsrc(System.String,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the recordings associated with the specified ISRC value.</summary>
            <param name="isrc">The ISRC to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The recordings associated with the requested ISRC.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupIsrcAsync(System.String,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the recordings associated with the specified ISRC value.</summary>
            <param name="isrc">The ISRC to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The recordings associated with the requested ISRC.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupIswc(System.String,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the works associated with the specified ISWC.</summary>
            <param name="iswc">The ISWC to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The works associated with the requested ISWC.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupIswcAsync(System.String,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the works associated with the specified ISWC.</summary>
            <param name="iswc">The ISWC to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The works associated with the requested ISWC.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupLabel(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Looks up the specified label.</summary>
            <param name="mbid">The MBID for the label to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <returns>The requested label.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupLabelAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Looks up the specified label.</summary>
            <param name="mbid">The MBID for the label to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested label.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupPlace(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified place.</summary>
            <param name="mbid">The MBID for the place to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested place.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupPlaceAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified place.</summary>
            <param name="mbid">The MBID for the place to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested place.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupRecording(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Looks up the specified recording.</summary>
            <param name="mbid">The MBID for the recording to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <returns>The requested recording.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupRecordingAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseType},System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Looks up the specified recording.</summary>
            <param name="mbid">The MBID for the recording to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="type">
            The release type to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested recording.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupRelease(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified release.</summary>
            <param name="mbid">The MBID for the release to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested release.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupReleaseAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified release.</summary>
            <param name="mbid">The MBID for the release to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested release.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupReleaseGroup(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus})">
            <summary>Looks up the specified release group.</summary>
            <param name="mbid">The MBID for the release group to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <returns>The requested release group.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupReleaseGroupAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Nullable{MetaBrainz.MusicBrainz.ReleaseStatus},System.Threading.CancellationToken)">
            <summary>Looks up the specified release group.</summary>
            <param name="mbid">The MBID for the release group to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="status">
            The release status to filter on; applies only when <paramref name="inc"/> includes <see cref="F:MetaBrainz.MusicBrainz.Include.Releases"/>.
            </param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested release group.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupSeries(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified series.</summary>
            <param name="mbid">The MBID for the series to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested series.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupSeriesAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified series.</summary>
            <param name="mbid">The MBID for the series to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested series.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupUrl(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified URL.</summary>
            <param name="mbid">The MBID for the URL to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested URL.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupUrl(System.Uri,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified URL.</summary>
            <param name="resource">The resource to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested URL.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupUrlAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified URL.</summary>
            <param name="mbid">The MBID for the URL to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested URL.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupUrlAsync(System.Uri,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified URL.</summary>
            <param name="resource">The resource to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested URL.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupWork(System.Guid,MetaBrainz.MusicBrainz.Include)">
            <summary>Looks up the specified work.</summary>
            <param name="mbid">The MBID for the work to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <returns>The requested work.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.LookupWorkAsync(System.Guid,MetaBrainz.MusicBrainz.Include,System.Threading.CancellationToken)">
            <summary>Looks up the specified work.</summary>
            <param name="mbid">The MBID for the work to look up.</param>
            <param name="inc">Additional information to include in the result.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The requested work.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllAnnotations(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for annotations using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>entity</term><description>the MBID of the annotated entity</description></item>
            <item><term>name</term><description>the name of the annotated entity</description></item>
            <item><term>text</term><description>the content of the annotation (includes wiki formatting)</description></item>
            <item><term>type</term><description>the type of the annotated entity</description></item>
            </list>
            Query terms without a field specifier will search the <em>name</em>, <em>text</em> and <em>type</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Annotation">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAnnotations(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for annotations using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllAnnotations(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAnnotationsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for annotations using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllAnnotations(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllAreas(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for areas using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>aid</term><description>the area's MBID</description></item>
            <item><term>alias</term><description>an alias attached to the area</description></item>
            <item><term>area</term><description>the area's name</description></item>
            <item><term>begin</term><description>the area's begin date</description></item>
            <item><term>comment</term><description>the area's disambiguation comment</description></item>
            <item><term>end</term><description>the area's end date</description></item>
            <item><term>ended</term><description>a flag indicating whether or not the area has ended</description></item>
            <item><term>iso</term><description>an ISO 3166-1/2/3 code attached to the area</description></item>
            <item><term>iso1</term><description>an ISO 3166-1 code attached to the area</description></item>
            <item><term>iso2</term><description>an ISO 3166-2 code attached to the area</description></item>
            <item><term>iso3</term><description>an ISO 3166-3 code attached to the area</description></item>
            <item><term>sortname</term><description>the area's sort name</description></item>
            <item><term>type</term><description>the area's type</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>area</em> and <em>sortname</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Area">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAreas(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for areas using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllAreas(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAreasAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for areas using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllAreas(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllArtists(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for artists using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the artist</description></item>
            <item><term>area</term><description>the artist's main associated area</description></item>
            <item><term>arid</term><description>the artist's MBID</description></item>
            <item><term>artist</term><description>the artist's name (without accented characters)</description></item>
            <item><term>artistaccent</term><description>the artist's name (with accented characters)</description></item>
            <item><term>begin</term><description>the artist's begin date</description></item>
            <item><term>beginarea</term><description>the artist's begin area</description></item>
            <item><term>comment</term><description>the artist's disambiguation comment</description></item>
            <item>
            <term>country</term>
            <description>the 2-character code (ISO 3166-1 alpha-2) for the artist's main associated country</description>
            </item>
            <item><term>end</term><description>the artist's end date</description></item>
            <item><term>endarea</term><description>the artist's end area</description></item>
            <item><term>ended</term><description>a flag indicating whether or not the artist has ended</description></item>
            <item><term>gender</term><description>the artist's gender ("male", "female", or "other")</description></item>
            <item><term>ipi</term><description>an IPI code associated with the artist</description></item>
            <item><term>sortname</term><description>the artist's sort name</description></item>
            <item><term>tag</term><description>a tag attached to the artist</description></item>
            <item><term>type</term><description>the artist's type ("person", "group", ...)</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>artist</em> and <em>sortname</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Artist">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindArtists(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for artists using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllArtists(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindArtistsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for artists using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllArtists(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllCdStubs(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for CD stubs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>artist</term><description>the artist name set on the CD stub</description></item>
            <item><term>barcode</term><description>the barcode set on the CD stub</description></item>
            <item><term>comment</term><description>the comment set on the CD stub</description></item>
            <item><term>discid</term><description>the CD stub's Disc ID</description></item>
            <item><term>title</term><description>the release title set on the CD stub</description></item>
            <item><term>tracks</term><description>the CD stub's number of tracks</description></item>
            </list>
            Query terms without a field specifier will search the <em>artist</em> and <em>title</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#CdStubs">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindCdStubs(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for CD stubs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllCdStubs(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindCdStubsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for CD stubs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllCdStubs(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllEvents(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for events using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the event</description></item>
            <item><term>aid</term><description>the MBID of an area related to the event</description></item>
            <item><term>area</term><description>the name of an area related to the event</description></item>
            <item><term>arid</term><description>the MBID of an artist related to the event</description></item>
            <item><term>artist</term><description>the name of an artist related to the event</description></item>
            <item><term>comment</term><description>the disambiguation comment for the event</description></item>
            <item><term>eid</term><description>the MBID of the event</description></item>
            <item><term>event</term><description>the name of the event</description></item>
            <item><term>pid</term><description>the MBID of a place related to the event</description></item>
            <item><term>place</term><description>the name of a place related to the event</description></item>
            <item><term>type</term><description>the event's type</description></item>
            <item><term>tag</term><description>a tag attached to the event</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>artist</em> and <em>name</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Event">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindEvents(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for events using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllEvents(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindEventsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for events using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllEvents(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllInstruments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for instruments using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the instrument</description></item>
            <item><term>comment</term><description>the disambiguation comment for the instrument</description></item>
            <item><term>description</term><description>the description of the instrument</description></item>
            <item><term>iid</term><description>the MBID of the instrument</description></item>
            <item><term>instrument</term><description>the name of the instrument</description></item>
            <item><term>type</term><description>the instrument's type</description></item>
            <item><term>tag</term><description>a tag attached to the instrument</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>description</em> and <em>instrument</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Instrument">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindInstruments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for instruments using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllInstruments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindInstrumentsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for instruments using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllInstruments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllLabels(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for labels using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the label</description></item>
            <item><term>area</term><description>the name of the main area associated with the label</description></item>
            <item><term>begin</term><description>the label's founding date</description></item>
            <item><term>code</term><description>the label's label code (only the number, no "LC" prefix)</description></item>
            <item><term>comment</term><description>the disambiguation comment for the label</description></item>
            <item>
            <term>country</term>
            <description>the 2-character code (ISO 3166-1 alpha-2) for the label's main associated country</description>
            </item>
            <item><term>end</term><description>the label's dissolution date</description></item>
            <item><term>ended</term><description>a flag indicating whether or not the label has been dissolved</description></item>
            <item><term>ipi</term><description>an IPI code associated with the label</description></item>
            <item><term>label</term><description>the label's name (without accented characters)</description></item>
            <item><term>labelaccent</term><description>the label's name (with accented characters)</description></item>
            <item><term>laid</term><description>the label's MBID</description></item>
            <item><term>sortname</term><description>the label's sort name</description></item>
            <item><term>tag</term><description>a tag attached to the label</description></item>
            <item><term>type</term><description>the label's type</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>label</em> and <em>sortname</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Label">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindLabels(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for labels using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllLabels(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindLabelsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for labels using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllLabels(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllPlaces(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for places using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>address</term><description>the place's address</description></item>
            <item><term>alias</term><description>an alias attached to the place</description></item>
            <item><term>area</term><description>the name of the main area associated with the place</description></item>
            <item><term>begin</term><description>the place's begin date</description></item>
            <item><term>comment</term><description>the disambiguation comment for the place</description></item>
            <item><term>end</term><description>the place's end date</description></item>
            <item><term>ended</term><description>a flag indicating whether or not the place has ended</description></item>
            <item><term>lat</term><description>the place's latitude</description></item>
            <item><term>long</term><description>the place's longitude</description></item>
            <item><term>pid</term><description>the place's MBID</description></item>
            <item><term>place</term><description>the place's name (without accented characters)</description></item>
            <item><term>placeaccent</term><description>the place's name (with accented characters)</description></item>
            <item><term>type</term><description>the place's type</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em>, <em>address</em>, <em>area</em> and <em>place</em>
            fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Place">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindPlaces(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for places using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllPlaces(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindPlacesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for places using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllPlaces(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllRecordings(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for recordings using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>arid</term><description>the MBID of an artist credited for the recording</description></item>
            <item><term>artist</term><description>the full artist credit for the recording</description></item>
            <item><term>artistname</term><description>the name of an artist credited for the recording</description></item>
            <item><term>comment</term><description>the disambiguation comment for the recording</description></item>
            <item>
            <term>country</term>
            <description>
            the 2-character code (ISO 3166-1 alpha-2) of the main associated country for a release containing the recording
            </description>
            </item>
            <item>
            <term>creditname</term><description>the name of an artist credited for the recording, as credited</description>
            </item>
            <item><term>date</term><description>the recording's (earliest) release date</description></item>
            <item><term>dur</term><description>the recording's (average) duration, in milliseconds</description></item>
            <item><term>format</term><description>the format of a release containing the recording</description></item>
            <item><term>isrc</term><description>an ISRC associated with the recording</description></item>
            <item><term>number</term><description>the track number set for the recording on a release</description></item>
            <item>
            <term>position</term><description>the (1-based) medium number containing the recording on a release</description>
            </item>
            <item>
            <term>primarytype</term>
            <description>
            the primary type (album, single, ...) of a release group including a release containing the recording
            </description>
            </item>
            <item><term>qdur</term><description>the recording's quantized duration (duration / 2000)</description></item>
            <item><term>recording</term><description>the recording's title (without accented characters)</description></item>
            <item><term>recordingaccent</term><description>the recording's title (with accented characters)</description></item>
            <item><term>reid</term><description>the MBID of a release containing the recording</description></item>
            <item><term>release</term><description>the name of a release containing the recording</description></item>
            <item>
            <term>rgid</term><description>the MBID of a release group including a release containing the recording</description>
            </item>
            <item><term>rid</term><description>the recording's MBID</description></item>
            <item>
            <term>secondarytype</term>
            <description>
            a secondary type (compilation, live, ...) of a release group including a release containing the recording
            </description>
            </item>
            <item>
            <term>status</term>
            <description>the status (official, promotion, ...) of a release containing the recording</description>
            </item>
            <item><term>tag</term><description>a tag attached to the recording</description></item>
            <item><term>tid</term><description>the MBID of a track linked to the recording</description></item>
            <item><term>tnum</term><description>the recording's (1-based) track number on a medium</description></item>
            <item><term>tracks</term><description>the number of tracks on a medium containing the recording</description></item>
            <item>
            <term>tracksrelease</term><description>the total number of tracks on a release containing the recording</description>
            </item>
            <item>
            <term>type</term>
            <description>
            a primary or secondary type (compilation, live, ...) of a release group including a release containing the recording, or
            "standalone" for standalone recordings
            </description>
            </item>
            <item><term>video</term><description>a flag indicating whether or not the recording includes video</description></item>
            </list>
            Query terms without a field specifier will search the <em>recording</em> field only.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Recording">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindRecordings(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for recordings using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllRecordings(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindRecordingsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for recordings using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllRecordings(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllReleaseGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for release groups using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>arid</term><description>the MBID of an artist credited for the release group</description></item>
            <item><term>artist</term><description>the full artist credit for the release group</description></item>
            <item><term>artistname</term><description>the name of an artist credited for the release group</description></item>
            <item><term>comment</term><description>the disambiguation comment for the release group</description></item>
            <item>
            <term>creditname</term><description>the name of an artist credited for the release group, as credited</description>
            </item>
            <item><term>primarytype</term><description>the primary type (album, single, ...) of the release group</description></item>
            <item><term>reid</term><description>the MBID of a release in the release group</description></item>
            <item><term>release</term><description>the name of a release in the release group</description></item>
            <item><term>releasegroup</term><description>the release group's title (without accented characters)</description></item>
            <item>
            <term>releasegroupaccent</term><description>the release group's title (with accented characters)</description>
            </item>
            <item><term>releases</term><description>the number of releases in the release group</description></item>
            <item><term>rgid</term><description>the release group's MBID</description></item>
            <item>
            <term>secondarytype</term><description>a secondary type (compilation, live, ...) of the release group</description>
            </item>
            <item>
            <term>status</term><description>the status (official, promotion, ...) of a release in the release group</description>
            </item>
            <item><term>tag</term><description>a tag attached to the release group</description></item>
            <item><term>type</term><description>a primary or secondary type of the release group</description></item>
            </list>
            Query terms without a field specifier will search the <em>releasegroup</em> field only.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Release_Group">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindReleaseGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for release groups using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllReleaseGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindReleaseGroupsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for release groups using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllReleaseGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllReleases(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for releases using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>arid</term><description>the MBID of an artist credited for the release</description></item>
            <item><term>artist</term><description>the full artist credit for the release</description></item>
            <item><term>artistname</term><description>the name of an artist credited for the release</description></item>
            <item><term>asin</term><description>an Amazon ASIN associated with the release</description></item>
            <item><term>barcode</term><description>the release's barcode</description></item>
            <item><term>catno</term><description>a catalog number associated with the release</description></item>
            <item><term>comment</term><description>the disambiguation comment for the release</description></item>
            <item>
            <term>country</term>
            <description>the 2-character code (ISO 3166-1 alpha-2) for the release's main associated country</description>
            </item>
            <item><term>creditname</term><description>the name of an artist credited for the release, as credited</description></item>
            <item><term>date</term><description>the release date (YYYY-MM-DD)</description></item>
            <item>
            <term>discids</term>
            <description>the total number of Disc IDs (across all mediums) linked to the release</description>
            </item>
            <item>
            <term>discidsmedium</term><description>the number of DiscIDs linked to a single medium in the release</description>
            </item>
            <item><term>format</term><description>the release's format</description></item>
            <item><term>label</term><description>the name of a label associated with the release</description></item>
            <item><term>laid</term><description>the MBID of a label associated with the release</description></item>
            <item><term>lang</term><description>the three-character language code (ISO 639) for the release</description></item>
            <item><term>mediums</term><description>the number of mediums in the release</description></item>
            <item><term>primarytype</term><description>the primary type of the release's release group</description></item>
            <item><term>quality</term><description>the release's data quality (low/normal/high)</description></item>
            <item><term>reid</term><description>the release's MBID</description></item>
            <item><term>release</term><description>the release's title (without accented characters)</description></item>
            <item><term>releaseaccent</term><description>the release's title (with accented characters)</description></item>
            <item><term>rgid</term><description>the MBID of the release's release group</description></item>
            <item><term>script</term><description>the 4-character code (ISO 15924) for the release's script</description></item>
            <item><term>secondarytype</term><description>the secondary type of the release's release group</description></item>
            <item><term>status</term><description>the release's status</description></item>
            <item><term>tag</term><description>a tag attached to the release</description></item>
            <item><term>tracks</term><description>the total number of tracks (across all mediums) on the release</description></item>
            <item><term>tracksmedium</term><description>the number of tracks on a single medium in the release</description></item>
            <item><term>type</term><description>the primary or secondary type of the release's release group</description></item>
            </list>
            Query terms without a field specifier will search the <em>release</em> field only.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Release">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindReleases(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for releases using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllReleases(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindReleasesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for releases using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllReleases(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllSeries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for series using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the series</description></item>
            <item><term>comment</term><description>the disambiguation comment for the series</description></item>
            <item><term>series</term><description>the name of the series</description></item>
            <item><term>sid</term><description>the MBID of the series</description></item>
            <item><term>type</term><description>the series' type</description></item>
            <item><term>tag</term><description>a tag attached to the series</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em> and <em>series</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Series">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindSeries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for series using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllSeries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindSeriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for series using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllSeries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllTags(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for tags using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>relationtype</term><description>the type of a relationship attached to the URL</description></item>
            <item><term>targetid</term><description>the MBID of an entity related to the URL</description></item>
            <item><term>targettype</term><description>an entity type related to the URL</description></item>
            <item><term>uid</term><description>the MBID for the URL</description></item>
            <item><term>url</term><description>the URL itself</description></item>
            </list>
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#URL">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindTags(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for tags using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllTags(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindTagsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for tags using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllTags(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllUrls(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for URLs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>relationtype</term><description>the type of a relationship attached to the URL</description></item>
            <item><term>targetid</term><description>the MBID of an entity related to the URL</description></item>
            <item><term>targettype</term><description>an entity type related to the URL</description></item>
            <item><term>uid</term><description>the MBID for the URL</description></item>
            <item><term>url</term><description>the URL itself</description></item>
            </list>
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#URL">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindUrls(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for URLs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllUrls(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindUrlsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for URLs using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllUrls(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindAllWorks(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for works using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="pageSize">The maximum number of results to get in one request (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>
            All results of the search request.<br/>
            Note that this may use multiple "paged" requests to the web service. As such, an item can potentially be returned more than
            once: once at the end of a page, then again in the next page, if a new entry was inserted earlier in the sequence. Similarly,
            a result may be skipped if an item that was already returned is deleted (but deletions are far less likely).
            </returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks>
            <para>
            When <paramref name="simple"/> is specified as <see langword="true"/>, certain special query characters are escaped
            automatically, for ease of use. This corresponds to using "Indexed Search" on MusicBrainz.
            </para>
            <para>
            Otherwise, the full Lucene query syntax applies. This corresponds to using "Indexed Search with Advanced Query Syntax" on
            MusicBrainz. The following fields are available for the Lucene query:
            <list type="table">
            <listheader><term>Field</term><description>Description</description></listheader>
            <item><term>alias</term><description>an alias attached to the work</description></item>
            <item><term>arid</term><description>the MBID of an artist related to the work</description></item>
            <item><term>artist</term><description>the name of an artist related to the work</description></item>
            <item><term>comment</term><description>the disambiguation comment for the work</description></item>
            <item><term>iswc</term><description>an ISWC attached to the work</description></item>
            <item><term>lang</term><description>the lyrics language for the work</description></item>
            <item><term>tag</term><description>a tag attached to the work</description></item>
            <item><term>type</term><description>the work's type</description></item>
            <item><term>wid</term><description>the MBID of the work</description></item>
            <item><term>work</term><description>the name of the work (without accented characters)</description></item>
            <item><term>workaccent</term><description>the name of the work (with accented characters)</description></item>
            </list>
            Query terms without a field specifier will search the <em>alias</em> and <em>work</em> fields.
            </para>
            <para>
            See <a href="http://www.musicbrainz.org/doc/Development/XML_Web_Service/Version_2/Search#Work">the MusicBrainz
            Search API Docs</a> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindWorks(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Searches for works using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllWorks(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.FindWorksAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Searches for works using the given query.</summary>
            <param name="query">The search query to use.</param>
            <param name="limit">The maximum number of results to return (1-100; default is 25).</param>
            <param name="offset">The offset at which to start (i.e. the number of results to skip).</param>
            <param name="simple">If set to <see langword="true"/>, this disables advanced query syntax.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The search request, including the initial results.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the web service reports an error.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">When something goes wrong with the request.</exception>
            <remarks><inheritdoc cref="M:MetaBrainz.MusicBrainz.Query.FindAllWorks(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/></remarks>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.SubmitBarcodes(System.String)">
            <summary>Creates a submission request for setting a barcode on one or more releases.</summary>
            <param name="client">
            The ID of the client software submitting data.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            It will be included in the edit(s) registered by the MusicBrainz server for this submission.
            </param>
            <returns>A new barcode submission request.</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.SubmitIsrcs(System.String)">
            <summary>Creates a submission request for adding one or more ISRCs to one or more recordings.</summary>
            <param name="client">
            The ID of the client software submitting data.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.<br/>
            It will be included in the edit(s) registered by the MusicBrainz server for this submission.
            </param>
            <returns>A new ISRC submission request.</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.SubmitRatings(System.String)">
            <summary>Creates a submission request for rating one or more entities.</summary>
            <param name="client">
            The ID of the client software submitting data.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.
            </param>
            <returns>A new rating submission request.</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.Query.SubmitTags(System.String)">
            <summary>Creates a submission request for modifying tags on one or more entities.</summary>
            <param name="client">
            The ID of the client software submitting data.<br/>
            This has to be the application's name and version number.
            The recommended format is &quot;<c>application-version</c>&quot;, where <c>version</c> does not contain a dash.
            </param>
            <returns>A new tag submission request.</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="client"/> is blank.</exception>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.ReleaseStatus">
            <summary>Enumeration of the release status values.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Bootleg">
            <summary>
            An unofficial/underground release that was not sanctioned by the artist and/or the record company. This includes unofficial
            live recordings and pirated releases.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Official">
            <summary>
            Any release officially sanctioned by the artist and/or their record company. Most releases will fit into this category.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Promotion">
            <summary>
            A give-away release or a release intended to promote an upcoming official release (e.g. pre-release versions, releases
            included with a magazine, versions supplied to radio DJs for air-play).
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.PseudoRelease">
            <summary>
            An alternate version of a release where the titles have been changed. These don't correspond to any real release and should be
            linked to the original release using the translation and/or transliteration relationships.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Withdrawn">
            <summary>
            A previously official release that was actively withdrawn from circulation by the artist and/or their record company after
            being released, whether to replace it with a new version with some changes or to just retire it altogether (e.g. because of
            legal issues).
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Cancelled">
            <summary>
            A planned official release that was cancelled before being released, but for which enough info is known to still confidently
            list it (e.g. it was available for preorder).
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseStatus.Promotional">
            <inheritdoc cref="F:MetaBrainz.MusicBrainz.ReleaseStatus.Promotion"/>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.ReleaseType">
            <summary>Enumeration of the release type values (combines primary and secondary types).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Album">
            <summary>
            An album, perhaps better defined as a "Long Play" (LP) release, generally consists of previously unreleased material (unless
            this type is combined with secondary types which change that, such as <see cref="F:MetaBrainz.MusicBrainz.ReleaseType.Compilation"/>).
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Broadcast">
            <summary>
            An episodic release that was originally broadcast via radio, television, or the Internet, including podcasts.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.EP">
            <summary>
            An EP is a so-called "Extended Play" release and often contains the letters EP in the title. Generally an EP will be shorter
            than a full length release (an LP or "Long Play") and the tracks are usually exclusive to the EP, in other words the tracks
            don't come from a previously issued release. EP is fairly difficult to define; usually it should only be assumed that a
            release is an EP if the artist defines it as such.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Other">
            <summary>Any release that does not fit or can't decisively be placed in any of the categories above.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Single">
            <summary>
            A single has different definitions depending on the market it is released for.
            <list type="bullet">
            <item><description>
            In the US market, a single typically has one main song and possibly a handful of additional tracks or remixes of the main
            track; the single is usually named after its main song; the single is primarily released to get radio play and to promote
            release sales.
            </description></item>
            <item><description>
            The U.K. market (also Australia and Europe) is similar to the US market, however singles are often released as a two disc set,
            with each disc sold separately.
            They also sometimes have a longer version of the single (often combining the tracks from the two disc version) which is very
            similar to the US style single, and this is referred to as a "maxi-single". (In some cases the maxi-single is longer than the
            release the single comes from!)
            </description></item>
            <item><description>
            The Japanese market is much more single driven. The defining factor is typically the length of the single and the price it is
            sold at. Up until 1995 it was common that these singles would be released using a mini-cd format, which is basically a much
            smaller CD typically 8 cm in diameter. Around 1995 the 8cm single was phased out, and the standard 12cm CD single is more
            common now; generally re-releases of singles from pre-1995 will be released on the 12cm format, even if they were originally
            released on the 8cm format. Japanese singles often come with instrumental versions of the songs and also have maxi-singles
            like the UK with remixed versions of the songs. Sometimes a maxi-single will have more tracks than an EP but as it's all
            alternate versions of the same 2-3 songs it is still classified as a single.
            </description></item>
            </list>
            There are other variations of the single called a "split single" where songs by two different artists are released on the one
            disc, typically vinyl. The term "B-Side" comes from the era when singles were released on 7 inch (or sometimes 12 inch) vinyl
            with a song on each side, and so side A is the track that the single is named for, and the other side -side B- would contain a
            bonus song, or sometimes even the same song.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.AudioDrama">
            <summary>
            An audio drama is an audio-only performance of a play (often, but not always, meant for radio). Unlike audiobooks, it usually
            has multiple performers rather than a main narrator.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Audiobook">
            <summary>An audiobook is a book read by a narrator without music.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Compilation">
            <summary>
            A compilation, for the purposes of the MusicBrainz database, covers the following types of releases:
            <list type="bullet">
            <item><description>
            a collection of recordings from various old sources (not necessarily released) combined together. For example a "best of",
            retrospective or rarities type release.
            </description></item>
            <item><description>
            a various artists song collection, usually based on a general theme ("Songs for Lovers"), a particular time period ("Hits of
            1998"), or some other kind of grouping ("Songs From the Movies", the "Café del Mar" series, etc).
            </description></item>
            </list>
            The MusicBrainz project does not generally consider the following to be compilations:
            <list type="bullet">
            <item><description>a reissue of an album, even if it includes bonus tracks.</description></item>
            <item><description>a tribute release containing covers of music by another artist.</description></item>
            <item><description>a classical release containing new recordings of works by a classical artist.</description></item>
            <item><description>
            a release containing two albums and/or EPs (these should be tagged as either an 'album' or an 'EP' depending on the
            circumstances).
            </description></item>
            </list>
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.DJMix">
            <summary>
            A DJ-mix is a sequence of several recordings played one after the other, each one modified so that they blend together into a
            continuous flow of music. A DJ mix release requires that the recordings be modified in some manner, and the DJ who does this
            modification is usually (although not always) credited in a fairly prominent way.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Demo">
            <summary>
            A demo is typically distributed for limited circulation or reference use, rather than for general public release. It is a way
            for artists to pass along their music to record labels, producers, DJs or other artists.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.FieldRecording">
            <summary>A release mostly consisting of field recordings (such as nature sounds or city/industrial noise).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Interview">
            <summary>An interview release contains an interview, generally with an artist.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Live">
            <summary>A release that was recorded live.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.MixTape">
            <summary>
            Promotional in nature (but not necessarily free), mix-tapes and street albums are often released by artists to promote new
            artists, or upcoming studio albums by prominent artists. They are also sometimes used to keep fans' attention between studio
            releases and are most common in rap &amp; hip hop genres. They are often not sanctioned by the artist's label, may lack proper
            sample or song clearances and vary widely in production and recording quality. While mix-tapes are generally DJ-mixed, they
            are distinct from commercial DJ mixes (which are usually deemed compilations) and are defined by having a significant
            proportion of new material, including original production or original vocals over top of other artists' instrumentals. They
            are distinct from demos in that they are designed for release directly to the public and fans; not to labels.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Remix">
            <summary>A release that primarily contains remixed material.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.Soundtrack">
            <summary>
            A soundtrack is the musical score to a movie, TV series, stage show, computer game etc. In the specific cases of computer
            games, a game CD with audio tracks should be classified as a soundtrack: the musical properties of the CD are more interesting
            to MusicBrainz than the data properties.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.SpokenWord">
            <summary>Non-music spoken word releases.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.ReleaseType.StreetAlbum">
            <inheritdoc cref="F:MetaBrainz.MusicBrainz.ReleaseType.MixTape"/>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.TagVote">
            <summary>A vote for a tag.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.TagVote.Up">
            <summary>Vote up the tag. This adds 1 to the tag's vote count.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.TagVote.Down">
            <summary>
            Vote down the tag. This subtracts 1 from the tag's vote count and hides it from you in the UI.
            If this brings a tag's vote count to 0 or below, the tag will be hidden for everyone.
            </summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.TagVote.Withdraw">
            <summary>Withdraws any vote you may have previously submitted for the tag.</summary>
        </member>
    </members>
</doc>
