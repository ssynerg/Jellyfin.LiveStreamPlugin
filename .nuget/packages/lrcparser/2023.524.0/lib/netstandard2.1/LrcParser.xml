<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LrcParser</name>
    </assembly>
    <members>
        <member name="P:LrcParser.Model.Lyric.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:LrcParser.Model.Lyric.TimeTags">
            <summary>
            Time tags
            </summary>
        </member>
        <member name="P:LrcParser.Model.Lyric.RubyTags">
            <summary>
            Ruby tags
            </summary>
        </member>
        <member name="P:LrcParser.Model.RubyTag.TimeTags">
            <summary>
            Time tags
            </summary>
        </member>
        <member name="P:LrcParser.Model.RubyTag.StartCharIndex">
            <summary>
            Start char index at <see cref="P:LrcParser.Model.Lyric.Text"/>
            </summary>
        </member>
        <member name="P:LrcParser.Model.RubyTag.EndCharIndex">
            <summary>
            Start char index at <see cref="P:LrcParser.Model.Lyric.Text"/>
            </summary>
        </member>
        <member name="T:LrcParser.Parser.Lines.SingleLineParser`1">
            <inheritdoc>
            Base component pass string
            </inheritdoc>
            <typeparam name="T">Encode and decode object type</typeparam>
        </member>
        <member name="M:LrcParser.Parser.Lines.SingleLineParser`1.Decode(System.String)">
            <summary>
            Decode to target class and leave remain text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LrcParser.Parser.Lines.SingleLineParser`1.Encode(`0,System.Int32)">
            <summary>
            Encode target component
            </summary>
            <param name="component"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:LrcParser.Parser.Lrc.LrcParser">
            <summary>
            Parser for encode and decode .lrc lyric format
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcLyric.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcLyric.TimeTags">
            <summary>
            Time tags
            </summary>
        </member>
        <member name="T:LrcParser.Parser.Lrc.Metadata.LrcRuby">
            <summary>
            Ruby tag
            </summary>
            <example>
            @Ruby1=帰,かえ
            @Ruby25=時,じか,,[00:38:45]
            @Ruby49=時,とき,[00:38:45],[01:04:49]
            </example>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcRuby.Parent">
            <summary>
            Parent kanji
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcRuby.Ruby">
            <summary>
            Ruby
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcRuby.TimeTags">
            <summary>
            Time tags
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcRuby.StartTime">
            <summary>
            Start position
            </summary>
        </member>
        <member name="P:LrcParser.Parser.Lrc.Metadata.LrcRuby.EndTime">
            <summary>
            End position
            </summary>
        </member>
        <member name="M:LrcParser.Parser.Lrc.Utils.TimeTagUtils.MillionSecondToTimeTag(System.Int32)">
            <summary>
            Convert milliseconds to format [mm:ss.ss].
            </summary>
            <example>
            Input : 17970
            Output : [00:17:97]
            </example>
            <param name="millionSecond"></param>
            <returns></returns>
        </member>
        <member name="M:LrcParser.Parser.Lrc.Utils.TimeTagUtils.TimeTagToMillionSecond(System.String)">
            <summary>
            Convert format [mm:ss.ss] to milliseconds.
            </summary>
            <example>
            Input : [00:17:97]
            Output : 17970
            </example>
            <param name="timeTag"></param>
            <returns></returns>
        </member>
        <member name="T:LrcParser.Parser.LyricParser">
            <summary>
            Base abstract class for encode/decode lyric format.
            </summary>
        </member>
        <member name="M:LrcParser.Parser.LyricParser.Decode(System.String)">
            <summary>
            Decode the lyric from the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LrcParser.Parser.LyricParser.Encode(LrcParser.Model.Song)">
            <summary>
            Encode the lyric to the text format.
            </summary>
            <param name="song"></param>
            <returns></returns>
        </member>
        <member name="M:LrcParser.Utils.TextIndexUtils.ToCharIndex(LrcParser.Model.TextIndex)">
            <summary>
            Convert text index to char index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:LrcParser.Utils.TextIndexUtils.ToGapIndex(LrcParser.Model.TextIndex)">
            <summary>
            Convert the text index to the index of the indicator.
            </summary>
            <example>
            [0]カ[1]ラ[2]オ[3]ケ[4]
            </example>
            <param name="index"></param>
            <returns></returns>
        </member>
    </members>
</doc>
