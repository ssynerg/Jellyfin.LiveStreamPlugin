<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaBrainz.Common</name>
    </assembly>
    <members>
        <member name="T:MetaBrainz.Common.AsyncUtils">
            <summary>Utility methods related to <see langword="async"/> processing.</summary>
        </member>
        <member name="M:MetaBrainz.Common.AsyncUtils.ResultOf(System.Threading.Tasks.Task)">
            <summary>Synchronously awaits a task.</summary>
            <param name="task">The task to await.</param>
        </member>
        <member name="M:MetaBrainz.Common.AsyncUtils.ResultOf``1(System.Threading.Tasks.Task{``0})">
            <summary>Synchronously awaits a task.</summary>
            <param name="task">The task to await.</param>
            <typeparam name="T">The return type for the task.</typeparam>
            <returns>The value returned by the task when it completes.</returns>
        </member>
        <member name="M:MetaBrainz.Common.AsyncUtils.ResultOf(System.Threading.Tasks.ValueTask)">
            <summary>Synchronously awaits a task.</summary>
            <param name="task">The task to await.</param>
        </member>
        <member name="M:MetaBrainz.Common.AsyncUtils.ResultOf``1(System.Threading.Tasks.ValueTask{``0})">
            <summary>Synchronously awaits a task.</summary>
            <param name="task">The task to await.</param>
            <typeparam name="T">The return type for the task.</typeparam>
            <returns>The value returned by the task when it completes.</returns>
        </member>
        <member name="T:MetaBrainz.Common.HttpError">
            <summary>An error reported by an HTTP response.</summary>
        </member>
        <member name="M:MetaBrainz.Common.HttpError.#ctor(System.Net.HttpStatusCode,System.String,System.Version,System.String,System.Exception)">
            <summary>Creates a new HTTP error.</summary>
            <param name="status">The status code for the error.</param>
            <param name="reason">The reason phrase associated with the error.</param>
            <param name="version">The HTTP message version.</param>
            <param name="message">
            The message to use; if this is not specified or <see langword="null"/>, a message will be constructed based on
            <paramref name="status"/>, <paramref name="reason"/> and <paramref name="version"/>.
            </param>
            <param name="cause">The exception that caused this one, if any.</param>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.Content">
            <summary>The content (assumed to be text) of the error response, if available.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.ContentHeaders">
            <summary>The content headers of the error response, if available.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.Reason">
            <summary>The reason phrase associated with the error.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.RequestHeaders">
            <summary>The headers of the request that provoked the error response, if available.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.RequestUri">
            <summary>The URI for the request that provoked the error response, if available.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.ResponseHeaders">
            <summary>The headers of the error response, if available.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.Status">
            <summary>The status code for the error.</summary>
        </member>
        <member name="P:MetaBrainz.Common.HttpError.Version">
            <summary>The HTTP message version from the error response, if available.</summary>
        </member>
        <member name="M:MetaBrainz.Common.HttpError.FromResponse(System.Net.Http.HttpResponseMessage)">
            <summary>Creates a new HTTP error based on an response message.</summary>
            <param name="response">The response.</param>
            <returns>A new HTTP error containing information taken from the response message.</returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpError.FromResponseAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>Creates a new HTTP error based on an response message.</summary>
            <param name="response">The response message that triggered the error.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>A new HTTP error containing information taken from the response message.</returns>
        </member>
        <member name="T:MetaBrainz.Common.HttpUtils">
            <summary>Utility methods related to HTTP processing.</summary>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.Copy(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>Creates a copy of a set of HTTP content headers.</summary>
            <param name="headers">The headers to copy.</param>
            <returns>A new set of HTTP content headers, with the same contents as the set provided.</returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.Copy(System.Net.Http.Headers.HttpRequestHeaders)">
            <summary>Creates a copy of a set of HTTP request headers.</summary>
            <param name="headers">The headers to copy.</param>
            <returns>A new set of HTTP request headers, with the same contents as the set provided.</returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.Copy(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>Creates a copy of a set of HTTP response headers.</summary>
            <param name="headers">The headers to copy.</param>
            <returns>A new set of HTTP response headers, with the same contents as the set provided.</returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.CreateUserAgentHeader``1">
            <summary>Create a user agent header containing the name and version of the assembly containing a particular type.</summary>
            <typeparam name="T">The type to use to determine the assembly name and version.</typeparam>
            <returns>
            A user agent header containing the name and version of the assembly containing <typeparamref name="T"/>. If the assembly name
            cannot be obtained, <see cref="F:MetaBrainz.Common.HttpUtils.UnknownAssemblyName"/> will be used instead.
            </returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.EnsureSuccessful(System.Net.Http.HttpResponseMessage)">
            <summary>Checks a response to ensure it was successful.</summary>
            <param name="response">The response whose status should be checked.</param>
            <returns><paramref name="response"/>.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the response did not have a successful status.</exception>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.EnsureSuccessfulAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>Checks a response to ensure it was successful.</summary>
            <param name="response">The response whose status should be checked.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns><paramref name="response"/>.</returns>
            <exception cref="T:MetaBrainz.Common.HttpError">When the response did not have a successful status.</exception>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.GetContentEncoding(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>Gets the content encoding based on content headers.</summary>
            <param name="contentHeaders">The headers to get the information from.</param>
            <returns>
            The content encoding extracted from the headers (first from the <c>Content-Encoding</c> header, then from a <c>charset</c>
            specification as part of the <c>Content-Type</c> header), mapped to lower case; uses "utf-8" as fallback if no explicit
            specification was found.
            </returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.GetStringContent(System.Net.Http.HttpResponseMessage)">
            <summary>Gets the content of an HTTP response as a string.</summary>
            <param name="response">The response to process.</param>
            <returns>The content of <paramref name="response"/> as a string.</returns>
        </member>
        <member name="M:MetaBrainz.Common.HttpUtils.GetStringContentAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>Gets the content of an HTTP response as a string.</summary>
            <param name="response">The response to process.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The content of <paramref name="response"/> as a string.</returns>
        </member>
        <member name="F:MetaBrainz.Common.HttpUtils.TraceSource">
            <summary>The trace source (named 'MetaBrainz.Common.HttpUtils') used by this class.</summary>
        </member>
        <member name="F:MetaBrainz.Common.HttpUtils.UnknownAssemblyName">
            <summary>The name used by <see cref="M:MetaBrainz.Common.HttpUtils.CreateUserAgentHeader``1"/> when no assembly name is available.</summary>
        </member>
        <member name="T:MetaBrainz.Common.RateLimitInfo">
            <summary>
            Information about any rate limiting that is in effect, as returned in the response headers for web service requests.
            </summary>
        </member>
        <member name="P:MetaBrainz.Common.RateLimitInfo.AllowedRequests">
            <summary>The total number of requests allowed in the current time window, if available.</summary>
            <remarks>Corresponds to the value of the <code>X-RateLimit-Limit</code> header.</remarks>
        </member>
        <member name="P:MetaBrainz.Common.RateLimitInfo.LastRequest">
            <summary>The date and time at which the last request was made.</summary>
            <remarks>
            This is the (client-side) timestamp to which <see cref="P:MetaBrainz.Common.RateLimitInfo.ResetIn"/> can be added to determine the end of the window.
            </remarks>
        </member>
        <member name="P:MetaBrainz.Common.RateLimitInfo.RemainingRequests">
            <summary>The number of requests remaining in the current time window, if available.</summary>
            <remarks>Corresponds to the value of the <code>X-RateLimit-Remaining</code> header.</remarks>
        </member>
        <member name="P:MetaBrainz.Common.RateLimitInfo.ResetAt">
            <summary>The date and time at which the current time window expires, if available.</summary>
            <remarks>
            Corresponds to the value of the <code>X-RateLimit-Reset</code> header.<br/>
            If <see cref="P:MetaBrainz.Common.RateLimitInfo.ResetIn"/> is available, its use is strongly recommended over this field, to avoid issues with clients with
            clocks that are not correctly set.
            </remarks>
        </member>
        <member name="P:MetaBrainz.Common.RateLimitInfo.ResetIn">
            <summary>The number of seconds remaining until the current time window expires, if available.</summary>
            <remarks>Corresponds to the value of the <code>X-RateLimit-Reset-In</code> header.</remarks>
        </member>
        <member name="M:MetaBrainz.Common.RateLimitInfo.#ctor(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>Extracts rate limiting information from the headers of a web service response.</summary>
            <param name="headers">The web service response headers to get the rate limit information from.</param>
            <returns>
            Rate limit information, as extracted from <paramref name="headers"/>.<br/>
            <see cref="P:MetaBrainz.Common.RateLimitInfo.LastRequest"/> will be set to the current (UTC) date/time.
            </returns>
        </member>
        <member name="T:MetaBrainz.Common.TextUtils">
            <summary>Utility methods related to text processing.</summary>
        </member>
        <member name="M:MetaBrainz.Common.TextUtils.DecodeUtf8(System.ReadOnlySpan{System.Byte})">
            <summary>Decodes all the bytes in the specified span as a string, using the UTF-8 character set.</summary>
            <param name="bytes">A read-only byte span to decode to a Unicode string.</param>
            <returns>A string that contains the decoded bytes from the provided read-only span.</returns>
        </member>
        <member name="M:MetaBrainz.Common.TextUtils.FormatMultiLine(System.String,System.String,System.String,System.String)">
            <summary>Formats a string, including extra handling if it's multiline.</summary>
            <param name="text">The string to format. Trailing line breaks are discarded.</param>
            <param name="prefix">The prefix to use.</param>
            <param name="suffix">The suffix to use.</param>
            <param name="separator">The separator to use between lines.</param>
            <returns>The formatted version of <paramref name="text"/>.</returns>
        </member>
        <member name="T:MetaBrainz.Common.UnixTime">
            <summary>Utility class for working with Unix time values (seconds since 1970-01-01T00:00:00).</summary>
        </member>
        <member name="F:MetaBrainz.Common.UnixTime.Epoch">
            <summary>The epoch for Unix time values (1970-01-01T00:00:00Z).</summary>
        </member>
        <member name="M:MetaBrainz.Common.UnixTime.Convert(System.DateTimeOffset)">
            <summary>Computes the Unix time value corresponding to the specified date/time.</summary>
            <param name="value">The date/time to convert to a Unix time value.</param>
            <returns>The corresponding Unix time value.</returns>
        </member>
        <member name="M:MetaBrainz.Common.UnixTime.Convert(System.Nullable{System.DateTimeOffset})">
            <summary>Computes the Unix time value corresponding to the specified date/time.</summary>
            <param name="value">The date/time to convert to a Unix time value.</param>
            <returns>The corresponding Unix time value.</returns>
        </member>
        <member name="M:MetaBrainz.Common.UnixTime.Convert(System.Int64)">
            <summary>Computes the date/time corresponding to the specified Unix time value.</summary>
            <param name="value">The Unix time value to convert to a date/time.</param>
            <returns>The corresponding date/time.</returns>
        </member>
        <member name="M:MetaBrainz.Common.UnixTime.Convert(System.Nullable{System.Int64})">
            <summary>Computes the date/time corresponding to the specified Unix time value.</summary>
            <param name="value">The Unix time value to convert to a date/time.</param>
            <returns>The corresponding date/time.</returns>
        </member>
    </members>
</doc>
